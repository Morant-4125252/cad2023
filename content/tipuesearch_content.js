var tipuesearch = {"pages": [{'title': '關於', 'text': 'https://github.com/Morant-4125252/cad2023 \n', 'tags': '', 'url': '關於.html'}, {'title': '布萊頓', 'text': 'https://en.wikipedia.org/wiki/Python_（程式語言） \n 例子： \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python教學： \n https://docs.python.org/3/tutorial/ \n Python的平衡介紹 \n 縮排（Python採用4個Spaces縮排，以介面執行範圍） \n 變數（ Python 關鍵字 ） \n 註（#單行註解、三單標註或三雙標註標註多行註解） \n 數 (整數 int(), 浮點數 float()) \n 字符串 （字串） \n print (Python 內建函數,  print() 函數式) \n Python是控制流程工具 \n 為了 \n 如果 \n 範圍 \n 開放 \n 讀 \n 清單 \n 元組 \n 字典 \n 功能 \n 嘗試...除了 \n 休息時間 \n 曾經 \n 類別 \n 此頁面示範如何在同一頁面下加入多個線上Ace編輯器與執行按鈕（ practice_html.txt 動態頁面超檔案）。 \n Practice_html.txt 動態頁面超檔案應該可以在啟動Brython時，設定分割.py檔案放入downloads/py目錄中的參考。 \n 也所有即將出現的對應 html 也使用 Brython 產生，然後編寫為 類別 後，在範例匯入時交叉 實例 引用。 \n <!-- 啟動 Brython -->  \n<script>  \nwindow.onload=function(){  \nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']}) ;  \n}  \n</腳本> \n 從1累加到100： \n 1加到100 \n 將 iterable 與 iterator 相關說明 ，利用 Brython 與 Ace Editor 整理頁面。 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 文件名稱： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑步   輸出   明確輸出區 清晰的繪圖區 重新載入 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從1累加到100第2部分： \n 1加到100 cango_三_齒輪 BS蛇 人工智能俄羅斯區塊鏈 旋轉塊 \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 文件名稱： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑步   輸出   明確輸出區 清晰的繪圖區 重新載入 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n', 'tags': '', 'url': '布萊頓.html'}, {'title': 'w4~w5', 'text': '', 'tags': '', 'url': 'w4~w5.html'}, {'title': '西門子', 'text': '西門子（Siemens）是德國有名的機電資軟硬體整合公司，目前推出的電腦輔助機械設計套件包括中階套件 Solid Edge（ 社區版Siemens Solid Edge  \xa0-\xa0 可攜版下載 （前鋒上網即可開啟，但因為） ）)））啟動前執行Solid Edge所需的導入，可否版本建議在有還原卡或虛擬主機中使用，僅適用於@nfu用戶），與高階套件NX。 \xa0 \xa0 \n 下載 NX2027.3401_lite_cad2022.7z （需下載密碼，執行時必須連網至機械設計工程系的認證伺服器才能開啟） \xa0 \xa0 \n', 'tags': '', 'url': '西門子.html'}, {'title': '預覽作品', 'text': 'SOLIDWORKS 是目前全球機械使用最普遍的設計與繪圖套件（估計全球有超過 300 名工程師用戶）。有關 CAD 的發展歷史，請參考此影片。有關 SOLIDWORKS 的起源以及相關歷史資料 ， 請 參考 影片 一 、 影片二 、 影片三 、 影片四 與 影片五 的介紹。 \xa0 \n 其他與SOLIDWORKS相關的參考資料： \n SOLIDWORKS 是由 Jon Hirschtick 在 1993 年創立的。他利用作為 MIT Blackjack Team （ 決勝 21 點電影 ）成員所製作的 100 萬美元專輯該公司之一。SOLIDWORKS 首次於 1995 年與 Windows 95 同時發布。（來源 ） ） \xa0 \xa0 \xa0 \xa0 \xa0 \n Jon Hirschtick 訪談,\xa0  1  ,\xa0  2  ,\xa0  3  ,\xa0  4  ,\xa0  5 \n 今年\xa0 SolidWorks 97示範影片 \n 使用SOLIDWORKS執行電腦輔助設計零組件繪圖，在電腦輔助設計室中可以使用SOLIDWORKS 2023，或在自己的電腦或筆電中安裝SOLIDWORKS 2022教育版（2023安裝套件尚未實現）。 \n 下載安裝SOLIDWORKS 2022 ： \n 下載SolidWorks 2022安裝檔案 （檔案大小16GB，僅限@nfu用戶，請先根據安裝序號與認證主機在校園網路中或穿越VPN（從ecare登入）申請連網，必須完整安裝結束後，重新 進行 服務包更新） \xa0 \xa0 \n 安裝SoildWorks 2022流程畫面（因為必須在園區內或使用VPN認證才能安裝完成，因此直接顯示序號與認證主機IP位元位址）： \n 下載後解開壓縮文件，執行Setup.exe進行安裝（以::2主機的安裝為例）： \n \n 輸入安裝序號，以下僅安裝基本模組，未勾選其餘套件： \n \n \n 安裝過程中必須先安裝與序號對應的版本內容後再進行更新，因此以下使用內定的否，表示先不下載更新檔： \n \n 勾選接受SolidWorks條款後進行安裝： \n \n 點選立即安裝後，會跳出認證伺服器的視窗表格，輸入正確的認證埠號碼與IPv4位址才可進行安裝，內建2023.04.07，校內的SolidWorks認證主機僅支援IPv4網路協定認證，若獲得認證的電腦僅啟動IPv6網路協議，將無法獲得認證授權。 \n \n 接下來確定之後，就可以進行擴大且達到 20 GB 的 SolidWorks 安裝： \n \n 在安裝完成之前，會跳出以下窗口，可以不參加客戶經驗改進計劃，也許可以操作過程不只： \n \n 最後按下完成鍵就可以執行SolidWorks 2022了。 \n 啟動時顯示共有500個使用者可以同時連線： \n \n 啟動時必須允許SolidWorks通過公用網路防火牆： \n \n 並且必須接受 SolidWorks 的使用授權： \n \n 然後還需要進行選擇各模組的資料更新，如下更新所有模組： \n \n 更新完成後，在開始選單中執行SOLIDWORKS 2022，然後同意使用授權： \n \n 終於可以使用這個佔用20GB硬碟資料的SolidWorks了： \n \n', 'tags': '', 'url': '預覽作品.html'}, {'title': '歐特克', 'text': 'AutoDesk公司推出的電腦輔助機械設計套件都提供 免付費教育版 。 其中Inventor可以 直接從學校網站下載 ，且 教育版的A360 可以在雲端或近端啟動，但近端必須安裝對應套件。 \xa0 \n', 'tags': '', 'url': '歐特克.html'}, {'title': '正溫度係數', 'text': 'PTC 公司目前擁有Creo與 Onshape 等介面的電腦輔助機械設計套件。Creo 前身為Pro/Engineer的始祖Pro/Engineer的著名參數設計繪圖，而 Onshape 則由原始SOLIDWORKS的開發者所建立的全雲電腦輔助機械設計服務。 \xa0 \xa0 \xa0 \xa0 \xa0 \n Creo 學生版： https://www.ptc.com/en/products/education/free-software/creo-college-download \xa0 \n Onshape教育版： https://www.onshape.com/en/education/ \xa0 \n', 'tags': '', 'url': '正溫度係數.html'}, {'title': 'W6-W7', 'text': 'w5之前的教學影片： \n 利用隨身碟上的批次檔案進行電腦輔助設計室網路環境設定 \xa0(更完整的 網路設定內容 ) \n w5 2b 從 Onshape 轉出零組件 STL 後轉入 CoppeliaSim 操作說明 \n \n w6 \n 評分網站與以太坊： \n 2a cad2023學員網站與交通鏈接 \n ag1 （ 回購 ） \xa0 \n ag2 （ 回購 ） \xa0 \n ag3 （ 回購 ） \xa0 \n ag4 （ 回購 ） \xa0 \n AG5 （ 回購 ） \xa0 \n AG6 （ 回購 ） \xa0 \n 2b cad2023學員網站與交通鏈接 \n 學員展示用IPv6位址： \n 2a 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cada:: 資料夾名單序號 \n 2b 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cadb:: 資料夾名單序號 \n 建立題目線上考試： \n 學習完成任務零組件繪圖 \n 學習如何使用 zmqRemote API Python 控制模擬場景中的零元件 \n 2a w6 已建立評分項目，設定頁面，匯入進入Replit，並能自治版本回到github 清單 ： \xa0 \n 40923118  \xa0 (  （ 回購 ） 41123108  （ 回購 ） _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  41123111  （ 回購 ） 41123112  （ 回購 ） 41123114  （ 回購 ） 41123115  （ 回購 ） 41123116  （ 回購 ） 41123117  （ 回購 ） 411231  （ 回購 ） 41123123  （ 回購 ） _  _  _  _  _  _  _  41123124  （ 回購 ） 41123  126  （ 回購 ） 41123128  （ 回購 ） 41123129  （ 回購 ） 41123130  （ 回購 ） 41123134  （ 回購 ） 41130  （回購 ） 41123134  （ 回購 ） 411231353 回購 ） （ 回購 ） 41123140  （ 回購 ） 41123141  （ 回購 ） 41123142  （ 回購 ） 41123143  （ 回購 ） 41123144 （回購） 41123145  （ 回購 ） 41123146  （ 回購 ） 411238 回購 ） 41123146  （ 回購 ） 411233 回購 （ 123351  ） 0  （ 回購 ） 41123152  （ 回購 ） \xa0 \n 2b w6 已建立評分項目，設定頁面，匯入進入 Replit，並能自治版本回到 github 清單 ： \xa0 \n 41123205  41123215  41123216  41123220  41123231  41123241  41123243  41123251 \n 利用 pull request 加入或修改 https://github.com/mdecycu/studlist \xa0錢包中 2b.txt 資料的 說明影片 。 \xa0 \xa0 \xa0 \n 利用 https://github.com/mdecycu/cmsite \xa0作為範本建立cad2023以太坊與網站，並轉入Replit進行維護的 說明影片 。 \xa0 \n 2a 開始進行九人一組，每三人坐在一起，由組長建立 cad2023_ag1 ~ cad2023_ag6，放置 mdecycu 設為友善者的 說明影片 。 \n \n w7 \n 2b 進行九人一組安排固定座位，由組長設定 cad2023_bg1 ~ cad2023_bg6，放置 mdecycu 設為友善者。 \n 九人包必須在 w9 之前提交以下圖示的 3D 可自行列印的零模型，包含各個 CAD 套件的完整安裝與零組件組件繪製過程影片（期中考週由各組進行簡報） 。 \n \n SolidWorks，請採用 2022以上版本 ，安裝檔案SOLIDWORKS 2022 SP3.1_20220711.7z 16GB。 參考資料： http://wcm.cycu.org:  88/github/cad2019/downloads/Solidworks_Tutorial/Cunithub ）開啟） \xa0 \xa0 \xa0 \n NX，請採用 NX2027.3401_lite_cad2022.7z （需下載密碼，下載2GB，解開後約8GB）。 \xa0 \xa0 \n Inventor，請在校網或使用 VPN 下載 2022 版本（下載點 1 、 2 、 3 ，安裝檔案 Inventor_Pro_2022_Traditional_Chinese_Win_64bit_Dlm_001_003.sfx.exe 2GB）。 \xa0 \xa0 \xa0 \n Solid Edge，請使用 社群版 ，Gmail登入後，下載Solid_Edge_Community_2023_2210.exe 3.8GB。 \xa0 \n Creo，請使用 學生版 ，以學校電子郵件註冊可以下載Creo 10（MED-100WIN-CD-470_10-0-0-0_Win64.zip安裝檔案5.9GB）， 參考資料 。 \xa0 \xa0 \n 形狀 。 \n Fusion 360，請在校網或使用VPN 下載 ，Fusion 360 Admin Install.exe安裝檔GB。 \xa0 \n \n \n 維護cad2023錢包與網站的方法： \n \n 複製+Github \n 可攜環境 + Github (下載包含 Python 3.12.0, Tiny C Compiler 與 CoppeliaSim 4.5.1 的 portable_2024_cp_wcms_cad_cd_w_ebooks.7z  ,  1.2GB 解開後3.3GB  , 維護單 頁 密碼 \xa0 \xa0 \n 自架伺服器+Github \n \n', 'tags': '', 'url': 'W6-W7.html'}, {'title': 'WIN11', 'text': '目前大概端的靜態網站呈現為http，而非https暫時忽略以下問題。 \n \n 為了讓cd2023內容管理系統在近端Python 3.12.0環境啟動時，能夠順利啟動start_static模擬靜態系統，目前的start_static原始碼改為： \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17號 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n \n \n \n @app .route( \'/start_static/\' ) \n def   start_static(): \n \xa0 \n \xa0\xa0\xa0\xa0 """Start local static server \n \xa0\xa0\xa0\xa0 """ \n \xa0 \n \xa0\xa0\xa0\xa0 if   isAdmin(): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 server_address  =   get_wan_address()  or   \'localhost\' \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 server_port  =   static_port \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Determine address family based on server_address \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 address_family  =   socket.AF_INET  if   \':\'   not   in   server_address  else   socket.AF_INET6 \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 httpd  =   http.server.HTTPServer((server_address, server_port), http.server.SimpleHTTPRequestHandler, bind_and_activate = False ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 httpd.socket  =   socket.socket(address_family, socket.SOCK_STREAM) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 httpd.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,  1 ) \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   address_family  = =   socket.AF_INET6: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 httpd.socket.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_V6ONLY,  0 ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 httpd.socket.bind((server_address, server_port,  0 ,  0 )) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 else : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 httpd.socket.bind((server_address, server_port)) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # for Python 3.12.0 need to use ssl create context first \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # https://docs.python.org/3/library/ssl.html#ssl-security \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 context  =   ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 context.load_cert_chain(certfile = \'./localhost.crt\' , keyfile = \'./localhost.key\' ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 httpd.socket  =   context.wrap_socket(httpd.socket, server_side = True ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 httpd.server_activate() \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 httpd.serve_forever() \n \xa0\xa0\xa0\xa0 else : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   redirect( "/login" ) \n \n \n \n \n \n \n \n 其中當start_static執行時，匯流排openssl指令： \n Y:\\portablegit\\usr\\bin\\openssl s_client -connect [Windows 11 的 IPv6 位址]:8445 -tls1_3 \n 檢查，發現目前採用 context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER) 設定中的\xa0 ssl.PROTOCOL_TLS_SERVER，採用的認證版本為 tls 1.2 和 1.3 版本，但 類似於 這裡的敘述 ，伺服器發出的 tls 1.3 版本可以被 Windows 10接受作業系統，完全無法在Windows 11作業系統中正確連線採用上述程式碼的靜態網頁伺服器。 \n 另外，透過 Windows 11 搜尋輸入 inetcpl.cpl 可以發現 tls 1.3 已經啟用。 因此目前無法得知為何start_static啟動後，無法在 Windows 11 連線到虛擬的系統靜態網站。 \n \n', 'tags': '', 'url': 'WIN11.html'}, {'title': 'w8', 'text': '針對 Coppeliasim 4.6.0 版本的發布： \n CoppeliaSim於2023.10.21 推出 4.6.0版本 。 （因為更改不了，目前可以沿用4.5.1 rev4，但仍然必須關注CoppeliaSim系統逐步強化Python腳本的趨勢（ 1,2  ） ， 其能夠在機電方面更重要場景中，導入更多的AI相關訓練） \xa0 \xa0 \n 插件 架構更新，可載入或卸載插件 \n sim.setThreadAutomaticSwitch 已棄用，取而代之的是 sim.setStepping \n sim.switchThread 已被廢棄，取而代之的是 sim.step \n 命令列 選項 -H 現在載入 CoppeliaSim 庫的無頭版本。 \n CoppeliaSim 使用手冊： https://mde.tw/pjcopsim \n zmq 遠端 API： https://www.coppeliarobotics.com/helpFiles/en/zmqRemoteApiOverview.htm \n https://github.com/CoppeliaRobotics/zmqRemoteApi \n 適用於IPv6的CoppeliaSim 4.5.1： \n 下載 CoppeliaSimEdu_4.5.1_rev4_for_cd2023.7z  (需下載密碼) \xa0 \n 下載 zmqRemoteAPI Python for cad2023.7z  (需下載密碼) \xa0 \n \n 有關 s1511.cycu.org 主機的使用，也可以參考 https://mde.tw/cpnote 中各章節內容頁。 \n 維護網站的語音方式： \n \n localhost令牌，SSH決定git推送權限，SSH設定可設定Putty \n Replit connect 功能連結與 Github 的權限 \n 自架主機s1511.cycu.org，利用SSH與分配連接埠號 \n \n \n 以下將說明第3種方法，使用s1511.cycu.org管理個人與資料夾網站： \n 其中包括1） 如何退出登錄 、2） 如何取放文件 、3） 如何與github帳號用戶信任 、4） 如何連接cad2023、5 ） 如何啟動或關閉cad2023文件 、6） 如何鏈接到動態網站 、7  ）設置靜態網站 、8） 如何與靜態網頁改版連動動態網站 、9） 如何對資料進行保護 以及10）東南亞 網路連線 等。 \n w8_2a_s1511 設定操作影片part1.mp4 \n w8_2a_s1511 設定操作影片part2.mp4 \n w8_2a_s1511 設定操作影片part3.mp4  \xa0(只有前段有聲音) \xa0 \n w8 2a s1511 設定操作影片part4.mp4 \n 1) 如何登入終端機 ： \n 終端登錄 s1511.cycu.org (僅支援 IPv6 網路協定), 命令列指令 ssh 用戶端, 工具可以使用 Putty \n 使用 ssh 指令：ssh 帳號@s1511.cycu.org 然後輸入密碼（輸入密碼時螢幕不會並顯示字元） \n 使用 putty.exe 設定會話令其連接到 s1511.cycu.org \n 登出指令為 exit \n 假設在 IPv4 網路協定下，則 ssh 指令與 putty.exe 都必須能夠支援 IPv6 的代理主機進行連線。 \n 2b w8作業：請根據\xa0 cad2023_2b_w8.txt \xa0檔案中的內容，跨程式的讀取與課篩選，根據時間底部，啟動2b修改習營中已經登錄s1511.cycu.org的學號。(修改課名單 2a\xa0  :\xa0  \xa0 0838  \xa0 ，2b：\xa0  \xa0 0851 ） \xa0 \n 假設在近端處理，必須同時儲存兩個檔案後，進行資料共享： \n get_stud_num_from_last_data.py  \xa0(若採 Brython 編寫，直接可以 上市 2b w8 結果 \xa0(  2a w8 結果 ),迭代進入時間前期排序，其中 41123227 為管理員初步測試時登錄，若採用 ANSI 編寫:  c_parse_last_cp2023.7z  ) \xa0 \xa0 \xa0 \xa0 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17號 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n \n \n \n # 讀取學號檔案<font></font> \n with  open ( "2b_user_list.txt" ,  \'r\' ) as user_file:<font>< / font> \n \xa0\xa0\xa0\xa0 user_lines  =   user_file.read().splitlines()<font>< / font> \n <font>< / font> \n # 讀取 last 指令轉出的檔案, 以 last -w > cad2023_2b_w8.txt 建立檔案<font></font> \n with  open ( "cad2023_2b_w8.txt" ,  \'r\' ) as cad_file:<font>< / font> \n \xa0\xa0\xa0\xa0 # 以下是利用跳行符號, 將每一行區隔成數列<font></font> \n \xa0\xa0\xa0\xa0 cad_lines  =   cad_file.read().splitlines()<font>< / font> \n #print(cad_lines)<font></font> \n <font>< / font> \n # 從 cad_lines 建立所有登入使用者數列<font></font> \n login_users  =   []<font>< / font> \n for   i  in   cad_lines:<font>< / font> \n \xa0\xa0\xa0\xa0 line_list  =   i.split( " " )<font>< / font> \n \xa0\xa0\xa0\xa0 login_users.append(line_list[ 0 ])<font>< / font> \n #print(login_users)<font></font> \n <font>< / font> \n # 根據 https://stackoverflow.com/questions/480214/how-do-i-remove-duplicates-from-a-list-while-preserving-order<font></font> \n # 數列去除重複元素但仍保持原始次序<font></font> \n login_users  =   list ( dict .fromkeys(login_users))<font>< / font> \n #print(login_users)<font></font> \n <font>< / font> \n # 建立數列存放符合條件的使用者<font></font> \n valid_users  =   []<font>< / font> \n <font>< / font> \n # 取出符合條件的使用者<font></font> \n for   line  in   login_users:<font>< / font> \n \xa0\xa0\xa0\xa0 if   "cad"   in   line:<font>< / font> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 將 cad 字串去除<font></font> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 user_number  =   line.replace( "cad" , "")<font>< / font> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   user_number  in   user_lines:<font>< / font> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 valid_users.append(user_number)<font>< / font> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 <font>< / font> \n # 利用 reverse() 將 valid_users 反向排序<font></font> \n valid_users.reverse()<font>< / font> \n <font>< / font> \n # , 最早登入者列在最前面<font></font> \n for   user  in   valid_users:<font>< / font> \n \xa0\xa0\xa0\xa0 print (user)<font>< / font> \n \n \n \n \n \n \n \n 2） 如何取放文件 ： \n 利用sftp從s1511.cycu.org清理文件畫面： \n \n 進入對應的目錄之後，以pwd 確認所在目錄後，以得到清理文件，以放上文件，例如：進入images 目錄後，可以穿透get gd_ex1.png 清理圖檔，將圖檔放入images 目錄，則確定確定sftp進入後，cd到images目錄，然後以put gd_ex1.png將圖檔送入。 \n 3） 如何與github帳號信任 ： \n 利用 ssh-keygen 在 .ssh 目錄中建立 id_rsa 和 id_rsa.pub，然後將 id_rsa.pub 註冊到各自帳號下設定的 SSH 和 GPG 金鑰區域。 \n .ssh 目錄中的\xa0 config  \xa0 ，將 SSH 會話名稱設為 github.com： \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n \n \n \n Host github.com<font></font> \n User git<font></font> \n Hostname github.com<font></font> \n ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n \n \n \n \n \n 將上列 config 傳送到帳號下的 .ssh 目錄之後，就可以利用 github.com 作為會話，從 github.com 拿起 cad2023 端口，並且已經具備 git push 的權限。 \n 4） 如何清理cad2023 ： \n 以 SSH 清理 cad2023 的指令： \n git clone --recurse-submodules  \xa0 git@github.com  : 帳號/cad2023.git \xa0 \n 接下來必須從cad2023清理server.py進行編輯，放入自己指派的9xxx連線埠後，再回傳。 \n 5) 如何啟動或關閉cad2023 ： \n 當使用者已經將上述預設登入Github帳號下，並且已經將server.py中的9xxx改為自己所指派的內部連線連接埠後再傳回，則可以利用python3 server.py編輯網站，並測試是否可連線至 https://s1511.cycu.org:8xxxx \n 由於管理員內建密碼為admin，使用者修改後，編碼字符串將存入config/config，此檔案必須設定只有管理員可以讀取，若目前位於登入後的工作目錄，則其指令為： \n chmod og-rwx 配置/配置 \n 表示其他與群組針對 config/config 檔案的讀取、寫入與執行權限取消。 \n 若希望使用者登入後動態網站仍然執行，python3 server.py& \n 當server.py已經啟動時，使用者登入後可以使用下列指令，啟動各使用者啟動網頁編輯所對應的PID（進程ID）： \n ps -axo pid，comm，uname |  \xa0 grep“python3” \n 各使用者若希望刪除已啟動的進程，可以找到啟動所的PID後，以下列指令關閉服務（如果PID = 1234）： \n 殺死 1234 \n 其中，系統管理員可以刪除所有進程，而單一使用者只能刪除各個啟動的進程。 \n 6） 如何連結到動態網站 ： \n python3 server.py 啟動測試是否可以連線到 https://s1511.cycu.org:8xxxx \n 編輯網站啟動之後，使用者登入後可以透過 config 指令修改管理員密碼，而此一密碼的編碼將存入 s1511 以太坊主機檔案中的 config/config 檔案中，且此一密碼的編碼將存入 s1511 ，而不會推向github.com（因為.gitignore的設定）。 \n 當使用者決定要進行 git add 和 git commit 之前，必須先以 git config 設定 user.name 和 user.email，此設定要存入 .gitconfig 檔案中。 \n 7） 如何設定靜態網站 ： \n 前面已經在/home/帳號/錢包目錄中透過SSH協定從github.com整理歸檔內容，由於SSH重要的設置，此錢包一旦修改修改版本，可以在新增提交之後，利用git推送指令將版本資料主動向github.com。 \n 當以太坊的靜態網站 git Push 至 github.com 後，將透過 Github Pages 的設定進行轉檔。 \n 如果使用者希望在 s1511 主機中伺服器對應的以太坊靜態網站，則可以將以太坊檔案存放帳戶中的 public_html 目錄中。 \n 由於位於public_html 名稱位於github.com 中的以太坊文件數據，不是作為 git commit 與 git Push 之用，因此可以利用 git 坊clone --recurse-submodules https://github.com/帳戶/以太坊.git挖礦（直接以https明確的報表內容），並可在https://s1511.cycu.org/~帳戶/帳戶名稱抽取靜態網站資料。 \n 8） 如何與靜態網頁連結動態網站改版： \n 當每次/home/帳戶/以太坊中的檔案修改版本，且資料已自動到github.com時，使用者就可以進入public_html中的以太坊目錄對應，以git pull指令從github.com取得最新的版本數據，該指令可以採用手動，也可以實現存取抓取的acp指令： \n acp 必須納入 public_html 目錄中的靜態網站 git pull，且利用 chmod u+x acp 令其執行。 \n acp 內容： \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n \n \n \n #! /bin/bash<font></font> \n git add .<font></font> \n git commit -m  "$1" <font></font> \n git push<font></font> \n cd ./../public_html/cad2023<font></font> \n git pull \n \n \n \n \n \n \n \n 9） 如何對數據進行： \n chmod u+x acp \n chmod og-rwx 配置/配置 \n chmod 711 /home/cad學號 \n chmoe 755 /home/cad學號/public_html \n 假設自己所分派到的網路連線被佔用，可以使用下列指令來尋找使用該連線連線連接埠號碼的使用者連線帳號連接埠： \n 例如要連接連接埠查詢號碼 9210 連接埠號碼的使用情況，指令為\xa0 lsof -i :9210，其中 ls 為 list, of 為開啟文件，-i 中的 i 為 internet, :9210 表示要求上市與連接埠 9210有關網路使用相關的資料。 \n 10) 網路連線協定: \n 將cad2023實體資料取得至s1511.cycu.org帳號下，若使用SSH協議且定位只有IPv6網路協議，則分別參與以SSH及https協議連線到github.com的設定。 \n 其中說到運用 SSH 協定與 github.com 連線，運用在 git clone --recurse-submodules  \xa0 git@github.com:帳號/cad2023.git 因為其流程是利用 SSH 協定以 git 帳號作為登入工作階段名稱為 github .com 的連線主機（即config中的主機名稱設定），能否最終登錄取決於github.com會話（即config中設定檔中的主機名稱）後面的帳號是否已登入目前.ssh/id_rsa對應的終點。 \n 至於在純IPv6網路下的s1511.cycu.org其https所需的代理設置，已經由管理員在/etc/environment中設置，因此所有用戶都需要設置。 \n \n 電腦輔助設計與實習課程分組網站在s1511.cycu.org所分配的外部與內部連接埠號碼： \n cad2023_ag1: 8232, 9232 \n cad2023_ag2: 8233, 9233 \n cad2023_ag3: 8234, 9234 \n cad2023_ag4: 8235, 9235 \n cad2023_ag5: 8236, 9236 \n cad2023_ag6: 8237, 9237 \n \n cad2023_bg1: 8238, 9238 \n cad2023_bg2: 8239, 9239 \n cad2023_bg3: 8240, 9240 \n cad2023_bg4: 8241, 9241 \n cad2023_bg5: 8242, 9242 \n cad2023_bg6: 8243, 9243 \n \n w8登錄查驗完成名單： \n 2a： \n 41023134  40923118  41123145 41123137 41123153 40923127 41123139 41123108 40923213 41123139 41123108 40923213 41123139 41123108 40923213  41123139  4112310  409  3108  40923213  41123117  4141241  4112415 3152  41123129  41123149  40923139  40923124  41123149  40923139  40923124  41123131  41 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \n 2b： \n 41123243 41123241 41123249 41123214 41123224 41123228 41123215 41123245 \xa0 41123216 \xa0 41123215 41123245 41123216 41123204 \xa0 41123245 \xa0 41123216 41123204 \xa0 141243 \xa0 3240 \xa0 41123229 \xa0 41123209 \xa0 41123207 \xa0 41123246 \xa0 41123250 \xa0 41123201 41123217 \xa0 41123251 \xa0 41123218 \n 模擬參考： \n https://www.researchgate.net/publication/263466730_Mathematical_Modeling_of_Electromagic_Levitation_Ball_using_Bondgraph \n https://hal.science/hal-02408779v1/file/Magnetic_Canon.pdf \n', 'tags': '', 'url': 'w8.html'}, {'title': 'w9', 'text': '相關口腔報告（口腔報告）： \n PowerPoint 與 Reveal.js：選擇簡報工具 (softwarekeep.com) \xa0 \n https://ithelp.ithome.com.tw/articles/10185467 \xa0 \n cad2023錢包中的reveal.js：\xa0  https ://mde.tw/cadnote/reveal/ \xa0 \n 有關永動機運動模擬玩具（永動機模擬器玩具）： \n CAD零組件繪圖 \n 原型製作前的系統模擬與製作流程規劃 \n 如何學習 CoppeliaSim \n 有關鋼球平衡台（鋼球平衡平台）： \n 相關虛實整合彈珠台（網路實體彈珠台）： \n', 'tags': '', 'url': 'w9.html'}, {'title': '繪圖', 'text': '', 'tags': '', 'url': '繪圖.html'}, {'title': '組成圖：', 'text': '檔案連結： 磁力吸引繪圖影片.mp4 \n', 'tags': '', 'url': '組成圖：.html'}, {'title': '部分部分圖：', 'text': '', 'tags': '', 'url': '部分部分圖：.html'}, {'title': 'Onshape類似零組件', 'text': '桿子 \n \n 球 \n \n 底板 \n \n 環形 \n \n 平台 \n \n 環形 \n \n', 'tags': '', 'url': 'Onshape類似零組件.html'}, {'title': '繪圖心得：', 'text': '在作畫方面又學到了不過幾張不同的熟圖軟體，雖然還不夠，這幾張作圖軟體大同小異，把畫好的圖傳到自己的網站上，感覺極棒了 \n \n \n', 'tags': '', 'url': '繪圖心得：.html'}]};