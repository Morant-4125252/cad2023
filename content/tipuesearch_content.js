var tipuesearch = {"pages": [{'title': '關於', 'text': '41123224 張書維 \n 在反覆觀看上課影片以及多次詢問同學嘗試維護中 \n https://github.com/Morant-4125252/cad2023 \n', 'tags': '', 'url': '關於.html'}, {'title': '布萊頓', 'text': 'https://en.wikipedia.org/wiki/Python_（程式語言） \n 例子： \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python教學： \n https://docs.python.org/3/tutorial/ \n Python的平衡介紹 \n 縮排（Python採用4個Spaces縮排，以介面執行範圍） \n 變數（ Python 關鍵字 ） \n 註（#單行註解、三單標註或三雙標註標註多行註解） \n 數 (整數 int(), 浮點數 float()) \n 字符串 （字串） \n print (Python 內建函數,  print() 函數式) \n Python是控制流程工具 \n 為了 \n 如果 \n 範圍 \n 開放 \n 讀 \n 清單 \n 元組 \n 字典 \n 功能 \n 嘗試...除了 \n 休息時間 \n 曾經 \n 類別 \n 此頁面示範如何在同一頁面下加入多個線上Ace編輯器與執行按鈕（ practice_html.txt 動態頁面超檔案）。 \n Practice_html.txt 動態頁面超檔案應該可以在啟動Brython時，設定分割.py檔案放入downloads/py目錄中的參考。 \n 也所有即將出現的對應 html 也使用 Brython 產生，然後編寫為 類別 後，在範例匯入時交叉 實例 引用。 \n <!-- 啟動 Brython -->  \n<script>  \nwindow.onload=function(){  \nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']}) ;  \n}  \n</腳本> \n 從1累加到100： \n 1加到100 \n 將 iterable 與 iterator 相關說明 ，利用 Brython 與 Ace Editor 整理頁面。 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 文件名稱： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑步   輸出   明確輸出區 清晰的繪圖區 重新載入 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從1累加到100第2部分： \n 1加到100 cango_三_齒輪 BS蛇 人工智能俄羅斯區塊鏈 旋轉塊 \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 文件名稱： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑步   輸出   明確輸出區 清晰的繪圖區 重新載入 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n', 'tags': '', 'url': '布萊頓.html'}, {'title': 'w4~w5', 'text': '', 'tags': '', 'url': 'w4~w5.html'}, {'title': '西門子', 'text': '西門子（Siemens）是德國有名的機電資軟硬體整合公司，目前推出的電腦輔助機械設計套件包括中階套件 Solid Edge（ 社區版Siemens Solid Edge  \xa0-\xa0 可攜版下載 （前鋒上網即可開啟，但因為） ）)））啟動前執行Solid Edge所需的導入，可否版本建議在有還原卡或虛擬主機中使用，僅適用於@nfu用戶），與高階套件NX。 \xa0 \xa0 \n 下載 NX2027.3401_lite_cad2022.7z （需下載密碼，執行時必須連網至機械設計工程系的認證伺服器才能開啟） \xa0 \xa0 \n', 'tags': '', 'url': '西門子.html'}, {'title': '預覽作品', 'text': 'SOLIDWORKS 是目前全球機械使用最普遍的設計與繪圖套件（估計全球有超過 300 名工程師用戶）。有關 CAD 的發展歷史，請參考此影片。有關 SOLIDWORKS 的起源以及相關歷史資料 ， 請 參考 影片 一 、 影片二 、 影片三 、 影片四 與 影片五 的介紹。 \xa0 \n 其他與SOLIDWORKS相關的參考資料： \n SOLIDWORKS 是由 Jon Hirschtick 在 1993 年創立的。他利用作為 MIT Blackjack Team （ 決勝 21 點電影 ）成員所製作的 100 萬美元專輯該公司之一。SOLIDWORKS 首次於 1995 年與 Windows 95 同時發布。（來源 ） ） \xa0 \xa0 \xa0 \xa0 \xa0 \n Jon Hirschtick 訪談,\xa0  1  ,\xa0  2  ,\xa0  3  ,\xa0  4  ,\xa0  5 \n 今年\xa0 SolidWorks 97示範影片 \n 使用SOLIDWORKS執行電腦輔助設計零組件繪圖，在電腦輔助設計室中可以使用SOLIDWORKS 2023，或在自己的電腦或筆電中安裝SOLIDWORKS 2022教育版（2023安裝套件尚未實現）。 \n 下載安裝SOLIDWORKS 2022 ： \n 下載SolidWorks 2022安裝檔案 （檔案大小16GB，僅限@nfu用戶，請先根據安裝序號與認證主機在校園網路中或穿越VPN（從ecare登入）申請連網，必須完整安裝結束後，重新 進行 服務包更新） \xa0 \xa0 \n 安裝SoildWorks 2022流程畫面（因為必須在園區內或使用VPN認證才能安裝完成，因此直接顯示序號與認證主機IP位元位址）： \n 下載後解開壓縮文件，執行Setup.exe進行安裝（以::2主機的安裝為例）： \n \n 輸入安裝序號，以下僅安裝基本模組，未勾選其餘套件： \n \n \n 安裝過程中必須先安裝與序號對應的版本內容後再進行更新，因此以下使用內定的否，表示先不下載更新檔： \n \n 勾選接受SolidWorks條款後進行安裝： \n \n 點選立即安裝後，會跳出認證伺服器的視窗表格，輸入正確的認證埠號碼與IPv4位址才可進行安裝，內建2023.04.07，校內的SolidWorks認證主機僅支援IPv4網路協定認證，若獲得認證的電腦僅啟動IPv6網路協議，將無法獲得認證授權。 \n \n 接下來確定之後，就可以進行擴大且達到 20 GB 的 SolidWorks 安裝： \n \n 在安裝完成之前，會跳出以下窗口，可以不參加客戶經驗改進計劃，也許可以操作過程不只： \n \n 最後按下完成鍵就可以執行SolidWorks 2022了。 \n 啟動時顯示共有500個使用者可以同時連線： \n \n 啟動時必須允許SolidWorks通過公用網路防火牆： \n \n 並且必須接受 SolidWorks 的使用授權： \n \n 然後還需要進行選擇各模組的資料更新，如下更新所有模組： \n \n 更新完成後，在開始選單中執行SOLIDWORKS 2022，然後同意使用授權： \n \n 終於可以使用這個佔用20GB硬碟資料的SolidWorks了： \n \n', 'tags': '', 'url': '預覽作品.html'}, {'title': '歐特克', 'text': 'AutoDesk公司推出的電腦輔助機械設計套件都提供 免付費教育版 。 其中Inventor可以 直接從學校網站下載 ，且 教育版的A360 可以在雲端或近端啟動，但近端必須安裝對應套件。 \xa0 \n', 'tags': '', 'url': '歐特克.html'}, {'title': '正溫度係數', 'text': 'PTC 公司目前擁有Creo與 Onshape 等介面的電腦輔助機械設計套件。Creo 前身為Pro/Engineer的始祖Pro/Engineer的著名參數設計繪圖，而 Onshape 則由原始SOLIDWORKS的開發者所建立的全雲電腦輔助機械設計服務。 \xa0 \xa0 \xa0 \xa0 \xa0 \n Creo 學生版： https://www.ptc.com/en/products/education/free-software/creo-college-download \xa0 \n Onshape教育版： https://www.onshape.com/en/education/ \xa0 \n', 'tags': '', 'url': '正溫度係數.html'}, {'title': 'W6-W7', 'text': 'w5之前的教學影片： \n 利用隨身碟上的批次檔案進行電腦輔助設計室網路環境設定 \xa0(更完整的 網路設定內容 ) \n w5 2b 從 Onshape 轉出零組件 STL 後轉入 CoppeliaSim 操作說明 \n \n w6 \n 評分網站與以太坊： \n 2a cad2023學員網站與交通鏈接 \n ag1 （ 回購 ） \xa0 \n ag2 （ 回購 ） \xa0 \n ag3 （ 回購 ） \xa0 \n ag4 （ 回購 ） \xa0 \n AG5 （ 回購 ） \xa0 \n AG6 （ 回購 ） \xa0 \n 2b cad2023學員網站與交通鏈接 \n 學員展示用IPv6位址： \n 2a 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cada:: 資料夾名單序號 \n 2b 學員展示用 IPv6 位址: 2001:288:6004:17:2023:cadb:: 資料夾名單序號 \n 建立題目線上考試： \n 學習完成任務零組件繪圖 \n 學習如何使用 zmqRemote API Python 控制模擬場景中的零元件 \n 2a w6 已建立評分項目，設定頁面，匯入進入Replit，並能自治版本回到github 清單 ： \xa0 \n 40923118  \xa0 (  （ 回購 ） 41123108  （ 回購 ） _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  41123111  （ 回購 ） 41123112  （ 回購 ） 41123114  （ 回購 ） 41123115  （ 回購 ） 41123116  （ 回購 ） 41123117  （ 回購 ） 411231  （ 回購 ） 41123123  （ 回購 ） _  _  _  _  _  _  _  41123124  （ 回購 ） 41123  126  （ 回購 ） 41123128  （ 回購 ） 41123129  （ 回購 ） 41123130  （ 回購 ） 41123134  （ 回購 ） 41130  （回購 ） 41123134  （ 回購 ） 411231353 回購 ） （ 回購 ） 41123140  （ 回購 ） 41123141  （ 回購 ） 41123142  （ 回購 ） 41123143  （ 回購 ） 41123144 （回購） 41123145  （ 回購 ） 41123146  （ 回購 ） 411238 回購 ） 41123146  （ 回購 ） 411233 回購 （ 123351  ） 0  （ 回購 ） 41123152  （ 回購 ） \xa0 \n 2b w6 已建立評分項目，設定頁面，匯入進入 Replit，並能自治版本回到 github 清單 ： \xa0 \n 41123205  41123215  41123216  41123220  41123231  41123241  41123243  41123251 \n 利用 pull request 加入或修改 https://github.com/mdecycu/studlist \xa0錢包中 2b.txt 資料的 說明影片 。 \xa0 \xa0 \xa0 \n 利用 https://github.com/mdecycu/cmsite \xa0作為範本建立cad2023以太坊與網站，並轉入Replit進行維護的 說明影片 。 \xa0 \n 2a 開始進行九人一組，每三人坐在一起，由組長建立 cad2023_ag1 ~ cad2023_ag6，放置 mdecycu 設為友善者的 說明影片 。 \n \n w7 \n 2b 進行九人一組安排固定座位，由組長設定 cad2023_bg1 ~ cad2023_bg6，放置 mdecycu 設為友善者。 \n 九人包必須在 w9 之前提交以下圖示的 3D 可自行列印的零模型，包含各個 CAD 套件的完整安裝與零組件組件繪製過程影片（期中考週由各組進行簡報） 。 \n \n SolidWorks，請採用 2022以上版本 ，安裝檔案SOLIDWORKS 2022 SP3.1_20220711.7z 16GB。 參考資料： http://wcm.cycu.org:  88/github/cad2019/downloads/Solidworks_Tutorial/Cunithub ）開啟） \xa0 \xa0 \xa0 \n NX，請採用 NX2027.3401_lite_cad2022.7z （需下載密碼，下載2GB，解開後約8GB）。 \xa0 \xa0 \n Inventor，請在校網或使用 VPN 下載 2022 版本（下載點 1 、 2 、 3 ，安裝檔案 Inventor_Pro_2022_Traditional_Chinese_Win_64bit_Dlm_001_003.sfx.exe 2GB）。 \xa0 \xa0 \xa0 \n Solid Edge，請使用 社群版 ，Gmail登入後，下載Solid_Edge_Community_2023_2210.exe 3.8GB。 \xa0 \n Creo，請使用 學生版 ，以學校電子郵件註冊可以下載Creo 10（MED-100WIN-CD-470_10-0-0-0_Win64.zip安裝檔案5.9GB）， 參考資料 。 \xa0 \xa0 \n 形狀 。 \n Fusion 360，請在校網或使用VPN 下載 ，Fusion 360 Admin Install.exe安裝檔GB。 \xa0 \n \n \n 維護cad2023錢包與網站的方法： \n \n 複製+Github \n 可攜環境 + Github (下載包含 Python 3.12.0, Tiny C Compiler 與 CoppeliaSim 4.5.1 的 portable_2024_cp_wcms_cad_cd_w_ebooks.7z  ,  1.2GB 解開後3.3GB  , 維護單 頁 密碼 \xa0 \xa0 \n 自架伺服器+Github \n \n', 'tags': '', 'url': 'W6-W7.html'}, {'title': 'WIN11', 'text': '目前大概端的靜態網站呈現為http，而非https暫時忽略以下問題。 \n \n 為了讓cd2023內容管理系統在近端Python 3.12.0環境啟動時，能夠順利啟動start_static模擬靜態系統，目前的start_static原始碼改為： \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17號 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n \n \n \n @app .route( \'/start_static/\' ) \n def   start_static(): \n \xa0 \n \xa0\xa0\xa0\xa0 """Start local static server \n \xa0\xa0\xa0\xa0 """ \n \xa0 \n \xa0\xa0\xa0\xa0 if   isAdmin(): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 server_address  =   get_wan_address()  or   \'localhost\' \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 server_port  =   static_port \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Determine address family based on server_address \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 address_family  =   socket.AF_INET  if   \':\'   not   in   server_address  else   socket.AF_INET6 \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 httpd  =   http.server.HTTPServer((server_address, server_port), http.server.SimpleHTTPRequestHandler, bind_and_activate = False ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 httpd.socket  =   socket.socket(address_family, socket.SOCK_STREAM) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 httpd.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,  1 ) \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   address_family  = =   socket.AF_INET6: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 httpd.socket.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_V6ONLY,  0 ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 httpd.socket.bind((server_address, server_port,  0 ,  0 )) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 else : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 httpd.socket.bind((server_address, server_port)) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # for Python 3.12.0 need to use ssl create context first \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # https://docs.python.org/3/library/ssl.html#ssl-security \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 context  =   ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 context.load_cert_chain(certfile = \'./localhost.crt\' , keyfile = \'./localhost.key\' ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 httpd.socket  =   context.wrap_socket(httpd.socket, server_side = True ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 httpd.server_activate() \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 httpd.serve_forever() \n \xa0\xa0\xa0\xa0 else : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   redirect( "/login" ) \n \n \n \n \n \n \n \n 其中當start_static執行時，匯流排openssl指令： \n Y:\\portablegit\\usr\\bin\\openssl s_client -connect [Windows 11 的 IPv6 位址]:8445 -tls1_3 \n 檢查，發現目前採用 context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER) 設定中的\xa0 ssl.PROTOCOL_TLS_SERVER，採用的認證版本為 tls 1.2 和 1.3 版本，但 類似於 這裡的敘述 ，伺服器發出的 tls 1.3 版本可以被 Windows 10接受作業系統，完全無法在Windows 11作業系統中正確連線採用上述程式碼的靜態網頁伺服器。 \n 另外，透過 Windows 11 搜尋輸入 inetcpl.cpl 可以發現 tls 1.3 已經啟用。 因此目前無法得知為何start_static啟動後，無法在 Windows 11 連線到虛擬的系統靜態網站。 \n \n', 'tags': '', 'url': 'WIN11.html'}, {'title': 'w8', 'text': '針對 Coppeliasim 4.6.0 版本的發布： \n CoppeliaSim於2023.10.21 推出 4.6.0版本 。 （因為更改不了，目前可以沿用4.5.1 rev4，但仍然必須關注CoppeliaSim系統逐步強化Python腳本的趨勢（ 1,2  ） ， 其能夠在機電方面更重要場景中，導入更多的AI相關訓練） \xa0 \xa0 \n 插件 架構更新，可載入或卸載插件 \n sim.setThreadAutomaticSwitch 已棄用，取而代之的是 sim.setStepping \n sim.switchThread 已被廢棄，取而代之的是 sim.step \n 命令列 選項 -H 現在載入 CoppeliaSim 庫的無頭版本。 \n CoppeliaSim 使用手冊： https://mde.tw/pjcopsim \n zmq 遠端 API： https://www.coppeliarobotics.com/helpFiles/en/zmqRemoteApiOverview.htm \n https://github.com/CoppeliaRobotics/zmqRemoteApi \n 適用於IPv6的CoppeliaSim 4.5.1： \n 下載 CoppeliaSimEdu_4.5.1_rev4_for_cd2023.7z  (需下載密碼) \xa0 \n 下載 zmqRemoteAPI Python for cad2023.7z  (需下載密碼) \xa0 \n \n 有關 s1511.cycu.org 主機的使用，也可以參考 https://mde.tw/cpnote 中各章節內容頁。 \n 維護網站的語音方式： \n \n localhost令牌，SSH決定git推送權限，SSH設定可設定Putty \n Replit connect 功能連結與 Github 的權限 \n 自架主機s1511.cycu.org，利用SSH與分配連接埠號 \n \n \n 以下將說明第3種方法，使用s1511.cycu.org管理個人與資料夾網站： \n 其中包括1） 如何退出登錄 、2） 如何取放文件 、3） 如何與github帳號用戶信任 、4） 如何連接cad2023、5 ） 如何啟動或關閉cad2023文件 、6） 如何鏈接到動態網站 、7  ）設置靜態網站 、8） 如何與靜態網頁改版連動動態網站 、9） 如何對資料進行保護 以及10）東南亞 網路連線 等。 \n w8_2a_s1511 設定操作影片part1.mp4 \n w8_2a_s1511 設定操作影片part2.mp4 \n w8_2a_s1511 設定操作影片part3.mp4  \xa0(只有前段有聲音) \xa0 \n w8 2a s1511 設定操作影片part4.mp4 \n 1) 如何登入終端機 ： \n 終端登錄 s1511.cycu.org (僅支援 IPv6 網路協定), 命令列指令 ssh 用戶端, 工具可以使用 Putty \n 使用 ssh 指令：ssh 帳號@s1511.cycu.org 然後輸入密碼（輸入密碼時螢幕不會並顯示字元） \n 使用 putty.exe 設定會話令其連接到 s1511.cycu.org \n 登出指令為 exit \n 假設在 IPv4 網路協定下，則 ssh 指令與 putty.exe 都必須能夠支援 IPv6 的代理主機進行連線。 \n 2b w8作業：請根據\xa0 cad2023_2b_w8.txt \xa0檔案中的內容，跨程式的讀取與課篩選，根據時間底部，啟動2b修改習營中已經登錄s1511.cycu.org的學號。(修改課名單 2a\xa0  :\xa0  \xa0 0838  \xa0 ，2b：\xa0  \xa0 0851 ） \xa0 \n 假設在近端處理，必須同時儲存兩個檔案後，進行資料共享： \n get_stud_num_from_last_data.py  \xa0(若採 Brython 編寫，直接可以 上市 2b w8 結果 \xa0(  2a w8 結果 ),迭代進入時間前期排序，其中 41123227 為管理員初步測試時登錄，若採用 ANSI 編寫:  c_parse_last_cp2023.7z  ) \xa0 \xa0 \xa0 \xa0 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17號 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n \n \n \n # 讀取學號檔案<font></font> \n with  open ( "2b_user_list.txt" ,  \'r\' ) as user_file:<font>< / font> \n \xa0\xa0\xa0\xa0 user_lines  =   user_file.read().splitlines()<font>< / font> \n <font>< / font> \n # 讀取 last 指令轉出的檔案, 以 last -w > cad2023_2b_w8.txt 建立檔案<font></font> \n with  open ( "cad2023_2b_w8.txt" ,  \'r\' ) as cad_file:<font>< / font> \n \xa0\xa0\xa0\xa0 # 以下是利用跳行符號, 將每一行區隔成數列<font></font> \n \xa0\xa0\xa0\xa0 cad_lines  =   cad_file.read().splitlines()<font>< / font> \n #print(cad_lines)<font></font> \n <font>< / font> \n # 從 cad_lines 建立所有登入使用者數列<font></font> \n login_users  =   []<font>< / font> \n for   i  in   cad_lines:<font>< / font> \n \xa0\xa0\xa0\xa0 line_list  =   i.split( " " )<font>< / font> \n \xa0\xa0\xa0\xa0 login_users.append(line_list[ 0 ])<font>< / font> \n #print(login_users)<font></font> \n <font>< / font> \n # 根據 https://stackoverflow.com/questions/480214/how-do-i-remove-duplicates-from-a-list-while-preserving-order<font></font> \n # 數列去除重複元素但仍保持原始次序<font></font> \n login_users  =   list ( dict .fromkeys(login_users))<font>< / font> \n #print(login_users)<font></font> \n <font>< / font> \n # 建立數列存放符合條件的使用者<font></font> \n valid_users  =   []<font>< / font> \n <font>< / font> \n # 取出符合條件的使用者<font></font> \n for   line  in   login_users:<font>< / font> \n \xa0\xa0\xa0\xa0 if   "cad"   in   line:<font>< / font> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 將 cad 字串去除<font></font> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 user_number  =   line.replace( "cad" , "")<font>< / font> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   user_number  in   user_lines:<font>< / font> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 valid_users.append(user_number)<font>< / font> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 <font>< / font> \n # 利用 reverse() 將 valid_users 反向排序<font></font> \n valid_users.reverse()<font>< / font> \n <font>< / font> \n # , 最早登入者列在最前面<font></font> \n for   user  in   valid_users:<font>< / font> \n \xa0\xa0\xa0\xa0 print (user)<font>< / font> \n \n \n \n \n \n \n \n 2） 如何取放文件 ： \n 利用sftp從s1511.cycu.org清理文件畫面： \n \n 進入對應的目錄之後，以pwd 確認所在目錄後，以得到清理文件，以放上文件，例如：進入images 目錄後，可以穿透get gd_ex1.png 清理圖檔，將圖檔放入images 目錄，則確定確定sftp進入後，cd到images目錄，然後以put gd_ex1.png將圖檔送入。 \n 3） 如何與github帳號信任 ： \n 利用 ssh-keygen 在 .ssh 目錄中建立 id_rsa 和 id_rsa.pub，然後將 id_rsa.pub 註冊到各自帳號下設定的 SSH 和 GPG 金鑰區域。 \n .ssh 目錄中的\xa0 config  \xa0 ，將 SSH 會話名稱設為 github.com： \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n \n \n \n Host github.com<font></font> \n User git<font></font> \n Hostname github.com<font></font> \n ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n \n \n \n \n \n 將上列 config 傳送到帳號下的 .ssh 目錄之後，就可以利用 github.com 作為會話，從 github.com 拿起 cad2023 端口，並且已經具備 git push 的權限。 \n 4） 如何清理cad2023 ： \n 以 SSH 清理 cad2023 的指令： \n git clone --recurse-submodules  \xa0 git@github.com  : 帳號/cad2023.git \xa0 \n 接下來必須從cad2023清理server.py進行編輯，放入自己指派的9xxx連線埠後，再回傳。 \n 5) 如何啟動或關閉cad2023 ： \n 當使用者已經將上述預設登入Github帳號下，並且已經將server.py中的9xxx改為自己所指派的內部連線連接埠後再傳回，則可以利用python3 server.py編輯網站，並測試是否可連線至 https://s1511.cycu.org:8xxxx \n 由於管理員內建密碼為admin，使用者修改後，編碼字符串將存入config/config，此檔案必須設定只有管理員可以讀取，若目前位於登入後的工作目錄，則其指令為： \n chmod og-rwx 配置/配置 \n 表示其他與群組針對 config/config 檔案的讀取、寫入與執行權限取消。 \n 若希望使用者登入後動態網站仍然執行，python3 server.py& \n 當server.py已經啟動時，使用者登入後可以使用下列指令，啟動各使用者啟動網頁編輯所對應的PID（進程ID）： \n ps -axo pid，comm，uname |  \xa0 grep“python3” \n 各使用者若希望刪除已啟動的進程，可以找到啟動所的PID後，以下列指令關閉服務（如果PID = 1234）： \n 殺死 1234 \n 其中，系統管理員可以刪除所有進程，而單一使用者只能刪除各個啟動的進程。 \n 6） 如何連結到動態網站 ： \n python3 server.py 啟動測試是否可以連線到 https://s1511.cycu.org:8xxxx \n 編輯網站啟動之後，使用者登入後可以透過 config 指令修改管理員密碼，而此一密碼的編碼將存入 s1511 以太坊主機檔案中的 config/config 檔案中，且此一密碼的編碼將存入 s1511 ，而不會推向github.com（因為.gitignore的設定）。 \n 當使用者決定要進行 git add 和 git commit 之前，必須先以 git config 設定 user.name 和 user.email，此設定要存入 .gitconfig 檔案中。 \n 7） 如何設定靜態網站 ： \n 前面已經在/home/帳號/錢包目錄中透過SSH協定從github.com整理歸檔內容，由於SSH重要的設置，此錢包一旦修改修改版本，可以在新增提交之後，利用git推送指令將版本資料主動向github.com。 \n 當以太坊的靜態網站 git Push 至 github.com 後，將透過 Github Pages 的設定進行轉檔。 \n 如果使用者希望在 s1511 主機中伺服器對應的以太坊靜態網站，則可以將以太坊檔案存放帳戶中的 public_html 目錄中。 \n 由於位於public_html 名稱位於github.com 中的以太坊文件數據，不是作為 git commit 與 git Push 之用，因此可以利用 git 坊clone --recurse-submodules https://github.com/帳戶/以太坊.git挖礦（直接以https明確的報表內容），並可在https://s1511.cycu.org/~帳戶/帳戶名稱抽取靜態網站資料。 \n 8） 如何與靜態網頁連結動態網站改版： \n 當每次/home/帳戶/以太坊中的檔案修改版本，且資料已自動到github.com時，使用者就可以進入public_html中的以太坊目錄對應，以git pull指令從github.com取得最新的版本數據，該指令可以採用手動，也可以實現存取抓取的acp指令： \n acp 必須納入 public_html 目錄中的靜態網站 git pull，且利用 chmod u+x acp 令其執行。 \n acp 內容： \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n \n \n \n #! /bin/bash<font></font> \n git add .<font></font> \n git commit -m  "$1" <font></font> \n git push<font></font> \n cd ./../public_html/cad2023<font></font> \n git pull \n \n \n \n \n \n \n \n 9） 如何對數據進行： \n chmod u+x acp \n chmod og-rwx 配置/配置 \n chmod 711 /home/cad學號 \n chmoe 755 /home/cad學號/public_html \n 假設自己所分派到的網路連線被佔用，可以使用下列指令來尋找使用該連線連線連接埠號碼的使用者連線帳號連接埠： \n 例如要連接連接埠查詢號碼 9210 連接埠號碼的使用情況，指令為\xa0 lsof -i :9210，其中 ls 為 list, of 為開啟文件，-i 中的 i 為 internet, :9210 表示要求上市與連接埠 9210有關網路使用相關的資料。 \n 10) 網路連線協定: \n 將cad2023實體資料取得至s1511.cycu.org帳號下，若使用SSH協議且定位只有IPv6網路協議，則分別參與以SSH及https協議連線到github.com的設定。 \n 其中說到運用 SSH 協定與 github.com 連線，運用在 git clone --recurse-submodules  \xa0 git@github.com:帳號/cad2023.git 因為其流程是利用 SSH 協定以 git 帳號作為登入工作階段名稱為 github .com 的連線主機（即config中的主機名稱設定），能否最終登錄取決於github.com會話（即config中設定檔中的主機名稱）後面的帳號是否已登入目前.ssh/id_rsa對應的終點。 \n 至於在純IPv6網路下的s1511.cycu.org其https所需的代理設置，已經由管理員在/etc/environment中設置，因此所有用戶都需要設置。 \n \n 電腦輔助設計與實習課程分組網站在s1511.cycu.org所分配的外部與內部連接埠號碼： \n cad2023_ag1: 8232, 9232 \n cad2023_ag2: 8233, 9233 \n cad2023_ag3: 8234, 9234 \n cad2023_ag4: 8235, 9235 \n cad2023_ag5: 8236, 9236 \n cad2023_ag6: 8237, 9237 \n \n cad2023_bg1: 8238, 9238 \n cad2023_bg2: 8239, 9239 \n cad2023_bg3: 8240, 9240 \n cad2023_bg4: 8241, 9241 \n cad2023_bg5: 8242, 9242 \n cad2023_bg6: 8243, 9243 \n \n w8登錄查驗完成名單： \n 2a： \n 41023134  40923118  41123145 41123137 41123153 40923127 41123139 41123108 40923213 41123139 41123108 40923213 41123139 41123108 40923213  41123139  4112310  409  3108  40923213  41123117  4141241  4112415 3152  41123129  41123149  40923139  40923124  41123149  40923139  40923124  41123131  41 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \n 2b： \n 41123243 41123241 41123249 41123214 41123224 41123228 41123215 41123245 \xa0 41123216 \xa0 41123215 41123245 41123216 41123204 \xa0 41123245 \xa0 41123216 41123204 \xa0 141243 \xa0 3240 \xa0 41123229 \xa0 41123209 \xa0 41123207 \xa0 41123246 \xa0 41123250 \xa0 41123201 41123217 \xa0 41123251 \xa0 41123218 \n 模擬參考： \n https://www.researchgate.net/publication/263466730_Mathematical_Modeling_of_Electromagic_Levitation_Ball_using_Bondgraph \n https://hal.science/hal-02408779v1/file/Magnetic_Canon.pdf \n', 'tags': '', 'url': 'w8.html'}, {'title': 'w9', 'text': '下載整合網路設定、可攜程式系統以及執行可攜 Solid Edge 的 reg 與 batch files.7z \xa0 (需要密碼) \n 請各分組實際操作 \xa0 https://mde.tw/pjcopsim/content/bubbleRobTutorial.html \xa0 之後, 將操作過程與心得放入各組的分組網站中 (頁面標題為 w11), 並說明各組員在過程中所負責的工作內容與任務, 各組員所負責的項目請放入個人的網頁中. \n 過程中所遭遇問題, 請各組員利用 Teams 詢問 (CAD2023 MS Teams 代碼為: fnueb56). \n 執行 perpetual motion simulator 系統: \n 紀錄鋼球運動速度: \xa0 1 , \xa0 2 . \n 對模擬物件施力: \xa0 1 \xa0 (non-central), \xa0 2 \xa0 (center of mass), \xa0 3 \xa0 (施力並設定材料性質). \n 模擬電磁力: \xa0 1 , \xa0 2 . \n CoppeliaSim 鋼球永動模擬器電腦輔助設計三個階段: 建立模型零組件 - 轉入機電模擬系統 - 根據實際物理條件設置機電系統.\xa0 perpetual_motion_simulator_project_cad2023.7z 下載 \xa0 (需要密碼) \n 雲端、區網與近端環境中的電腦輔助設計環境: \n 直接在網路上進行電腦輔助設計的好處雖然很多, 但是在 商用的雲端系統 , 例如: Github 或 Replit, 使用者只能依照服務提供者的方法及流程進行應用, 當 Github 宣布在 2023 年底之前各用戶必須使用 2FA 認證登入, 使用者只能照辦, 否則帳號就可能被禁用. \n 作為 Replit 的免付費用戶也處於相同的情況, 當服務提供者宣布在 2024 年初開始, 只有付費用戶可以使用廣域的 Webview, 若希望仍維持免付費使用 (目前 \xa0 Replit Core 年費 \xa0 120 美元), 屆時再看是否能繼續開啟動態網站編輯, 並將改版內容提交推送到 Github 倉儲, 以便採分散式版次管理流程維護 Github Pages 網站. \n 同樣利用網路服務, 但設法將所有超過兩百名用戶集中到 自行搭建的廣域網站 系統, 也可以擁有類似 Replit 上維護網站內容的優點, 可是壞處是在系上工作站室所設定的軟硬體與網路連線, 都必須自行維護, 可用性與穩定度都遠遠不及商用的雲端系統. \n 另外, 在無網路連線的情況下, 若先前已經將 Github 上倉儲, git clone 到 近端硬碟或隨身碟 , 使用者仍可以直接利用可攜程式系統, 執行動態網站並針對電腦輔助流程新增提交改版內容, 等到有網路連線的時段再將資料推送到 Github. \n 最後, 假如系上的連外網路無法順利與 Github 相連, 所有電腦輔助設計與協同都必須在區網進行, 則可以使用 \xa0 Fossil SCM \xa0 進行各學員的分散式版次管理. (請參考 這裡 的說明). \n 循著上述相同的網路或自主環境, 利用 \xa0 Onshape \xa0 就與商用雲端系統相似, 一定要上網才能進行輔助設計繪圖, 而在系上或學校網路認證才能開啟的 \xa0 NX 或 SolidWorks , 就必須在自行搭建的認證主機能夠運作, 才可連線認證後開啟. 至於 \xa0 Solid Edge 可攜版與 Solvespace \xa0 則可以在沒有網路連線的情況下進行零組件的設計繪圖. \n \n w10 網路狀態: 目前似乎從學校電腦無法使用 hinet 的 IPv6 DNS 伺服器. 驗證方式: 在命令列中輸入 nslookup, 然後以 server 2001:b000:168::1 指令將 DNS 設為中華電信的符號名稱伺服器, 然後查詢 google.com. \n 因應方法: 使用機械設計系所建立的 DNS 伺服器, 140.130.17.3 以及 \xa0 2001:288:6004:17::3 \n 無法使用中華電信 DNS 原因: 應該是學校網管修改設定, 禁止跨區設定 DNS 伺服器. \n w10 Ubuntu 問題: 22.04 版更為最新後, netplan 在無 openvswitch 啟動的情況下無法更新設定. \n 先處理 /etc/netplan/net.yaml 中 DNS 伺服器改為系上主機, 在無法使用 sudo netplan apply 更新 /etc/netplan/net.yaml 設定之前, 可以查詢 /etc/environment 中是否使用 IPv6 address 進行設定 http_proxy 與 https_proxy 變數. 或者修改 /etc/resolv.conf 中的 nameserver 設定, 讓 net.yaml 中的 DNS 設定可以運作. 且利用 \xa0 sudo apt install openvswitch-switch \xa0 安裝並執行 netplan 所需的服務 (其實是 bug, 但為了能讓 netplan 正常運作的權宜之策). \n 有關電腦輔助設計室網路設定: \n w10_2b_cadlab_network_setting.7z \xa0 (需要下載密碼) - 電腦輔助設計室網路設定批次與 Powershell 檔案. \n tinyc.7z \xa0 (需要下載密碼) - 使用 Tiny C Compiler 編譯 C 程式, 包含 gd 與 gnuplot. \n python3114_git_putty.7z \xa0 (需要下載密碼) - 將近端 cmsimde 啟動並改版後推向 Github 所需的檔案. \n 若電腦輔助設計室網路不順, 可以先將倉儲 clone 到隨身碟, 並利用近端工具進行輔助設計且改版後 (git add and git commit), 等到網路順暢時才 push. \n \n creo 10 安裝流程的 wink 專案檔案下載 \xa0 (需要密碼) \n 有關線上簡報、網誌與多媒體影片製作工具, 請參考: \xa0 https://mde.tw/cpnote/content/w10.html \n 有關學習計算機程式與電腦輔助設計相關課程的心態與方法, 請參考 這裡 的說明. \n 因為 Python 3.12.0 環境下 Leo Editor 還無法正常透過 pip 安裝, 因此必須手動安裝 PyQt5 之後, 再使用 pip install leo, 所完成的 Python 3.12.0:\xa0 Python312_leo_664_PyQt5.7z \xa0 (需要下載密碼) \n 有關口頭報告 (oral presentation): \n PowerPoint vs reveal.js: Choosing Presentation Tools (softwarekeep.com) \xa0 \n https://ithelp.ithome.com.tw/articles/10185467 \xa0 \n cad2023 倉儲中的 reveal.js:\xa0 https://mde.tw/cadnote/reveal/ \xa0 \n 有關永動機運動模擬玩具 (perpetual motion simulator toy): \n CAD 零組件繪圖 \n 原型製作前的系統模擬與製程規劃 \n 如何學習 CoppeliaSim: \n 透過閱讀\xa0 https://mde.tw/pjcopsim \xa0中的 tutorial 與相關指令說明後, 實際操作測試並在個人網頁中記錄各項功能的使用方法. \n 進入 CoppeliaSim \xa0 Forum , 搜尋相關討論或發問. \n Arduino code to CoppeliaSim \xa0 展示. ( Horosim , \xa0 備份 ), 更早的 討論 . 虛實整合: \xa0 1 , \xa0 2 , \xa0 3 . \n 從既有討論串中學習: \xa0 1 , \n 了解與磁場模擬有關的研究: \xa0 1 \xa0 (需要下載密碼), \xa0 2 , \xa0 3 . \n 從 案例 中學習. \n 有關鋼球平衡台 (steel ball balancing platform): \n 有關虛實整合彈珠台 (cyber-physical pinball table): \n', 'tags': '', 'url': 'w9.html'}, {'title': 'wink', 'text': '學習如何利用 \xa0 Wink \xa0 製作電腦操作流程影片, 並將影片放入個人與分組網頁中. \n 首先使用者必須了解 \xa0 Wink \xa0 製作影片的功能與 \xa0 ShareX \xa0 相同, 都是依賴 \xa0 ffmpeg.exe . 意即使用 \xa0 Wink \xa0 之前必須在 Preferences 中先行設定 ffmpeg.exe 所在位置, 否則無法對所建立的專案轉為 mp4 檔案. \n 另外, 若擷取關鍵影格的電腦螢幕解析度大於 1008 x 630, 通常建立將影格 resize, 以方便使用者在手機上觀看影片. \n 利用 Wink 建立操作影片的步驟: \n \n 設定 ffmpeg.exe 所在位置, 若使用隨身碟中的可攜程式系統, 可將 ffmpeg.exe 放在 data 目錄中, 並以 wink_ffmpeg.reg 進行設定, 也可將 Wink 的啟動與 start_ipv6.bat 進行整合. \n 開啟 Wink 新專案. \n 每按下一次 Pause 鍵, 可擷取操作過程中的畫面影格 (利用 Zoomit 放大所要強調的操作內容, 並以紅線框列). \n 操作錄製結束後, 從右下方的 Tray 中, 以滑鼠左鍵點選, 在 Wink 圖示中, 以滑鼠右鍵帶出 Finish Capture 按鍵, 點選後即可回到 Wink 專案區. \n 在每一頁影格中加入註解說明 TextBox 之前, 先利用 Project - Resize All Frames 將影格縮小至 1008 x630. \n 完成註解說明後, 可以逐一移動各頁面滑鼠游標位置, 並決定各頁面影片播放時的停留時間. \n 最後以 Render 按鈕進行轉檔, 並利用 View Rendered Output 檢視所建立的操作影片. \n \n wink_ffmpeg.reg 設定檔案內容: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n \n \n \n Windows Registry Editor Version 5.00 \n \xa0 \n [HKEY_CURRENT_USER\\SOFTWARE\\Debugmode] \n \xa0 \n [HKEY_CURRENT_USER\\SOFTWARE\\Debugmode\\Wink\\Settings] \n "FfmpegPath" = "y:\\\\ffmpeg.exe" \n \n \n \n \n \n \n \n 2a_w10_start_ipv6_wink_reg.7z \n \n w11 作業 : \n \n 請分別利用 Replit、s1511.cycu.org 與 localhost 維護個人與分組網站, 分別在標題為 "hw" 的第一層頁面下, 建立第二層標題分別為 "Replit"、"s1511" 與 "localhost" 等三個頁面, 其中各放入採上述三種方式維護網頁的相關過程與細節. 並在各頁面中以文字說明操作步驟要點. \n 請在個人網頁中建立標題為 "project1" 的的第一層頁面下, 放入個人截至 w11 在 perpetual motion simulator 所完成的 Wink 過程操作說明影片. \n \n', 'tags': '', 'url': 'wink.html'}, {'title': 'w11', 'text': 'BubbleRob tutorial \n This tutorial will introduce quite many CoppeliaSim functionalities while designing the simple mobile robot \xa0 BubbleRob . The CoppeliaSim scene file related to this tutorial is located in \xa0 scenes/tutorials/BubbleRob . Following figure illustrates the simulation scene that we will design: \n \n \n Since this tutorial will fly over many different aspects, make sure to also have a look at the \xa0 other tutorials , mainly the \xa0 tutorial about building a simulation model . First of all, freshly start CoppeliaSim. The simulator displays a default \xa0 scene . We will start with the body of \xa0 BubbleRob . \n We add a primitive sphere of diameter 0.2 to the scene with [Menu bar --> Add --> Primitive shape --> Sphere]. We adjust the X-size item to 0.2, then click OK. The created sphere will appear in the \xa0 visibility layer \xa0 1 by default, and be \xa0 dynamic and respondable \xa0 (since we kept the item Create dynamic and respondable shape enabled). This means that \xa0 BubbleRob\'s \xa0 body will be falling and able to react to collisions with other respondable shapes (i.e. simulated by the physics engine). We can see this is the \xa0 shape dynamics properties : items Body is respondable and Body is dynamic are enabled. We start the simulation (via the toolbar button, or by pressing <control-space> in the scene window), and copy-and-paste the created sphere (with [Menu bar --> Edit --> Copy selected objects] then [Menu bar --> Edit -> Paste buffer], or with <control-c> then <control-v>): the two spheres will react to collision and roll away. We stop the simulation: the duplicated sphere will automatically be removed. This default behaviour can be modified in the \xa0 simulation dialog . \n We also want the \xa0 BubbleRob\'s \xa0 body to by usable by the other calculation modules (e.g. \xa0 distance calculation ). For that reason, we enable \xa0 Collidable , \xa0 Measurable \xa0 and \xa0 Detectable \xa0 in the \xa0 object common properties \xa0 for that shape, if not already enabled. If we wanted, we could now also change the visual appearance of our sphere in the \xa0 shape properties . \n Now we open the \xa0 position dialog \xa0 on the translation tab, select the sphere representing \xa0 BubbleRob\'s \xa0 body, and enter 0.02 for Along Z. We make sure that the Relative to-item is set to World. Then we click Translate selection. This translates all selected objects by 2 cm along the absolute Z-axis, and effectively lifted our sphere a little bit. In the \xa0 scene hierarchy , we double-click the sphere\'s alias, so that we can edit it. We enter \xa0 bubbleRob \xa0 and press enter. \n Next we will add a \xa0 proximity sensor \xa0 so that \xa0 BubbleRob \xa0 knows when it is approaching obstacles: we select [Menu bar --> Add --> Proximity sensor --> Cone type]. In the \xa0 orientation dialog \xa0 on the orientation tab, we enter 90 for Around Y and for Around Z, then click Rotate selection. In the \xa0 position dialog , on the position tab, we enter 0.1 for X-coord. and 0.12 for Z-coord. The proximity sensor is now correctly positioned relative to \xa0 BubbleRob\'s \xa0 body. We double-click the proximity sensor\'s icon in the \xa0 scene hierarchy \xa0 to open \xa0 its properties \xa0 dialog. We click Show volume parameter to open the \xa0 proximity sensor volume dialog . We adjust items Offset to 0.005, Angle to 30 and Range to 0.15. Then, in the \xa0 proximity sensor properties , we click Show detection parameters. This opens the \xa0 proximity sensor detection parameter dialog . We uncheck item Don\'t allow detections if distance smaller than then close that dialog again. In the scene hierarchy, we double-click the proximity sensor\'s alias in order to edit it. We enter \xa0 sensingNose \xa0 and press enter. \n We select \xa0 sensingNose , then control-select \xa0 bubbleRob , then click [Menu bar --> Edit --> Make last selected object parent]. This attaches the sensor to the body of the robot. We could also have dragged \xa0 sensingNose \xa0 onto \xa0 bubbleRob \xa0 in the scene hierarchy. This is what we now have: \n \n [Proximity sensor attached to \xa0 bubbleRob\'s \xa0 body] \n \n Next we will take care of \xa0 BubbleRob\'s \xa0 wheels. We create a new scene with [Menu bar --> File --> New scene]. It is often very convenient to work across several scenes, in order to visualize and work only on specific elements. We add a pure primitive cylinder with dimensions (0.08,0.08,0.02). As for the body of \xa0 BubbleRob , we enable \xa0 Collidable , \xa0 Measurable \xa0 and \xa0 Detectable \xa0 in the \xa0 object common properties \xa0 for that cylinder, if not already enabled. Then we set the cylinder\'s absolute position to (0.05,0.1,0.04) and its absolute orientation to (-90,0,0). We change the alias to \xa0 leftWheel . We copy and paste the wheel, and set the absolute Y coordinate of the copy to -0.1. We rename the copy to \xa0 rightWheel . We select the two wheels, copy them, then switch back to scene 1, then paste the wheels. \n We now need to add \xa0 joints \xa0 (or motors) for the wheels. We click [Menu bar --> Add --> Joint --> Revolute] to add a revolute joint to the scene. Most of the time, when adding a new object to the scene, the object will appear at the origin of the world. We Keep the joint selected, then control-select \xa0 leftWheel . In the \xa0 position dialog , on the position tab, we click the Apply to selection button: this positioned the joint at the center of the left wheel. Then, in the \xa0 orientation dialog , on the orientation tab, we do the same: this oriented the joint in the same way as the left wheel. We rename the joint to \xa0 leftMotor . We now double-click the joint\'s icon in the scene hierarchy to open the \xa0 joint properties \xa0 dialog. Then we click Show dynamic parameters to open the \xa0 joint dynamics properties \xa0 dialog. We enable the motor, and check item Lock motor when target velocity is zero. We now repeat the same procedure for the right motor and rename it to \xa0 rightMotor . Now we attach the left wheel to the left motor, the right wheel to the right motor, then attach the two motors to \xa0 bubbleRob . This is what we have: \n \n [Proximity sensor, motors and wheels] \n \n We run the simulation and notice that the robot is falling backwards. We are still missing a third contact point to the floor. We now add a small slider (or caster). In a new scene we and add a pure primitive sphere with diameter 0.05 and make the sphere \xa0 Collidable , \xa0 Measurable \xa0 and \xa0 Detectable \xa0 (if not already enabled), then rename it to \xa0 slider . We set the Material to \xa0 noFrictionMaterial \xa0 in the \xa0 shape dynamics properties . To rigidly link the slider with the rest of the robot, we add a \xa0 force sensor object \xa0 with [Menu bar --> Add --> Force sensor]. We rename it to \xa0 connection \xa0 and shift it up by 0.05. We attach the slider to the force sensor, then copy both objects, switch back to scene 1 and paste them. We then shift the force sensor by -0.07 along the absolute X-axis, then attach it to the robot body. If we run the simulation now, we can notice that the slider is slightly moving in relation to the robot body: this is because both objects (i.e. \xa0 slider \xa0 and \xa0 bubbleRob ) are colliding with each other. To avoid strange effects during dynamics simulation, we have to inform CoppeliaSim that both objects do not mutually collide, and we do this in following way: in the \xa0 shape dynamics properties , for \xa0 slider \xa0 we set the local respondable mask to 00001111, and for \xa0 bubbleRob , we set the local respondable mask to 11110000. If we run the simulation again, we can notice that both objects do not interfere anymore. This is what we now have: \n \n [Proximity sensor, motors, wheels and slider] \n \n We run the simulation again and notice that \xa0 BubbleRob \xa0 slightly moves, even with locked motor. We also try to run the simulation with different physics engines: the result will be different. Stability of dynamic simulations is tightly linked to masses and inertias of the involved non-static shapes. For an explanation of this effect, make sure to carefully read \xa0 this \xa0 and \xa0 that \xa0 sections. We now try to correct for that undesired effect. We select the two wheels and the slider, and in the shape dynamics dialog we click three times M=M*2 (for selection). The effect is that all selected shapes will have their masses multiplied by 8. We do the same with the inertias of the 3 selected shapes, then run the simulation again: stability has improved. In the joint dynamics dialog, we set the Target velocity to 50 for both motors. We run the simulation: \xa0 BubbleRob \xa0 now moves forward and eventually falls off the floor. We reset the Target velocity item to zero for both motors. \n The object \xa0 bubbleRob \xa0 is at the base of all \xa0 objects \xa0 that will later form the \xa0 BubbleRob \xa0 model . We will define the model a little bit later. Next we are going to add a \xa0 graph object \xa0 to \xa0 BubbleRob \xa0 in order to display its clearance distance. We click [Menu bar --> Add --> Graph] and rename it to \xa0 graph . We attach the graph to \xa0 bubbleRob , and set the graph\'s absolute coordinates to (0,0,0.005). \n Now we set one motor target velocity to 50, run the simulation, and will see \xa0 BubbleRob\'s \xa0 trajectory displayed in the scene. We then stop the simulation and reset the motor target velocity to zero. \n We add a pure primitive cylinder with following dimensions: (0.1, 0.1, 0.2). We want this cylinder to be static (i.e. not influenced by gravity or collisions) but still exerting some collision responses on non-static respondable shapes. For this, we disable Body is dynamic in the \xa0 shape dynamics properties . We also want our cylinder to be \xa0 Collidable , \xa0 Measurable \xa0 and \xa0 Detectable . We do this in the \xa0 object common properties . Now, while the cylinder is still selected, we click the object translation toolbar button: \n \n \n Now we can drag any point in the scene: the cylinder will follow the movement while always being constrained to keep the same Z-coordinate. We copy and paste the cylinder a few times, and move them to positions around \xa0 BubbleRob \xa0 (it is most convenient to perform that while looking at the scene from the top). During object shifting, holding down the shift key allows to perform smaller shift steps. Holding down the ctrl key allows to move in an orthogonal direction to the \xa0 regular \xa0 direction(s). When done, select the camera pan toolbar button again: \n \n \n We set a target velocity of 50 for the left motor and run the simulation: the graph view now displays the distance to the closest obstacle and the distance segment is visible in the scene too. We stop the simulation and reset the target velocity to zero. \n We now need to finish BubbleRob as a \xa0 model \xa0 definition. We select the model base (i.e. object \xa0 bubbleRob ) then check Object is model base in the \xa0 object common properties : there is now a stippled bounding box that encompasses all objects in the model hierarchy. We select the two joints, the proximity sensor and the graph, then enable item Ignored by model bounding box and click Apply to selection, in the same dialog: the model bounding box now ignores the two joints and the proximity sensor. Still in the same dialog, we disable camera visibility layer 2, and enable camera visibility layer 10 for the two joints and the force sensor: this effectively hides the two joints and the force sensor, since layers 9-16 are disabled by default. At any time we can \xa0 modify the visibility layers for the whole scene . To finish the model definition, we select the vision sensor, the two wheels, the slider, and the graph, then enable item Select base of model instead: if we now try to select an object in our model in the scene, the whole model will be selected instead, which is a convenient way to handle and manipulate the whole model as a single object. Additionally, this protects the model against inadvertant modification. Individual objects in the model can still be selected in the scene by click-selecting them with control-shift, or normally selecting them in the scene hierarchy. We finally collapse the model tree in the scene hierarchy. \n Next we will add a \xa0 vision sensor , at the same position and orientation as \xa0 BubbleRob\'s \xa0 proximity sensor. We open the model hierarchy again, then click [Menu bar --> Add --> Vision sensor --> Perspective type], then attach the vision sensor to the proximity sensor, and set the local position and orientation of the vision sensor to (0,0,0). We also make sure the vision sensor is not not visible, not part of the model bounding box, and that if clicked, the model will be selected instead. In order to customize the vision sensor, we open \xa0 its properties \xa0 dialog. We set the Far clipping plane item to 1, and the Resolution x and Resolution y items to 256 and 256. We add a floating view to the scene, and over the newly added floating view, right-click [Popup menu --> View --> Associate view with selected vision sensor] (we make sure the vision sensor is selected during that process). \n We attach a child script to the vision sensor by clicking [Menu bar --> Add --> Associated child script --> Non threaded]. We double-click the icon that appeared next to the vision sensor in the scene hierarchy: this opens the child script that we just added. We copy and paste following code into the \xa0 script editor , then close it: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n \n \n \n function   sysCall_vision(inData) \n \xa0\xa0\xa0\xa0 simVision.sensorImgToWorkImg(inData.handle)  -- copy the vision sensor image to the work image \n \xa0\xa0\xa0\xa0 simVision.edgeDetectionOnWorkImg(inData.handle,0.2)  -- perform edge detection on the work image \n \xa0\xa0\xa0\xa0 simVision.workImgToSensorImg(inData.handle)  -- copy the work image to the vision sensor image buffer \n end \n \xa0 \n function   sysCall_init() \n end \n \n \n \n \n \n \n \n To be able to see the vision sensor\'s image, we start the simulation, then stop it again. \n The last thing that we need for our scene is a small \xa0 child script \xa0 that will control \xa0 BubbleRob\'s \xa0 behavior. We select \xa0 bubbleRob \xa0 and click [Menu bar --> Add --> Associated child script --> Non threaded]. We double-click the script icon that appeared next to \xa0 bubbleRob\'s \xa0 alias in the scene hierarchy and copy and paste following code into the \xa0 script editor , then close it: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n \n \n \n function   speedChange_callback(ui,id,newVal) \n \xa0\xa0\xa0\xa0 speed=minMaxSpeed[1]+(minMaxSpeed[2]-minMaxSpeed[1])*newVal/100 \n end \n \xa0 \n function   sysCall_init() \n \xa0\xa0\xa0\xa0 -- This is executed exactly once, the first time this script is executed \n \xa0\xa0\xa0\xa0 bubbleRobBase=sim.getObject( \'.\' )  -- this is bubbleRob\'s handle \n \xa0\xa0\xa0\xa0 leftMotor=sim.getObject( "./leftMotor" )  -- Handle of the left motor \n \xa0\xa0\xa0\xa0 rightMotor=sim.getObject( "./rightMotor" )  -- Handle of the right motor \n \xa0\xa0\xa0\xa0 noseSensor=sim.getObject( "./sensingNose" )  -- Handle of the proximity sensor \n \xa0\xa0\xa0\xa0 minMaxSpeed={50* math.pi /180,300* math.pi /180}  -- Min and max speeds for each motor \n \xa0\xa0\xa0\xa0 backUntilTime=-1  -- Tells whether bubbleRob is in forward or backward mode \n \xa0\xa0\xa0\xa0 robotCollection=sim.createCollection(0) \n \xa0\xa0\xa0\xa0 sim.addItemToCollection(robotCollection,sim.handle_tree,bubbleRobBase,0) \n \xa0\xa0\xa0\xa0 distanceSegment=sim.addDrawingObject(sim.drawing_lines,4,0,-1,1,{0,1,0}) \n \xa0\xa0\xa0\xa0 robotTrace=sim.addDrawingObject(sim.drawing_linestrip+sim.drawing_cyclic,2,0,-1,200,{1,1,0}) \n \xa0\xa0\xa0\xa0 graph=sim.getObject( \'./graph\' ) \n \xa0\xa0\xa0\xa0 distStream=sim.addGraphStream(graph, \'bubbleRob clearance\' , \'m\' ,0,{1,0,0}) \n \xa0\xa0\xa0\xa0 -- Create the custom UI: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 xml =  \'<ui title="\' ..sim.getObjectAlias(bubbleRobBase,1).. \' speed" closeable="false" resizeable="false" activate="false">\' ..[[ \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 <hslider minimum= "0"   maximum= "100"   onchange= "speedChange_callback"   id= "1" /> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 <label text= ""   style= "* {margin-left: 300px;}" /> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 </ui> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ]] \n \xa0\xa0\xa0\xa0 ui=simUI.create(xml) \n \xa0\xa0\xa0\xa0 speed=(minMaxSpeed[1]+minMaxSpeed[2])*0.5 \n \xa0\xa0\xa0\xa0 simUI.setSliderValue(ui,1,100*(speed-minMaxSpeed[1])/(minMaxSpeed[2]-minMaxSpeed[1])) \n end \n \xa0 \n function   sysCall_sensing() \n \xa0\xa0\xa0\xa0 local   result,distData=sim.checkDistance(robotCollection,sim.handle_all) \n \xa0\xa0\xa0\xa0 if   result>0  then \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.addDrawingObjectItem(distanceSegment, nil ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.addDrawingObjectItem(distanceSegment,distData) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setGraphStreamValue(graph,distStream,distData[7]) \n \xa0\xa0\xa0\xa0 end \n \xa0\xa0\xa0\xa0 local   p=sim.getObjectPosition(bubbleRobBase,-1) \n \xa0\xa0\xa0\xa0 sim.addDrawingObjectItem(robotTrace,p) \n end \n \xa0 \n function   sysCall_actuation() \n \xa0\xa0\xa0\xa0 result=sim.readProximitySensor(noseSensor)  -- Read the proximity sensor \n \xa0\xa0\xa0\xa0 -- If we detected something, we set the backward mode: \n \xa0\xa0\xa0\xa0 if   (result>0)  then   backUntilTime=sim.getSimulationTime()+4  end \n \xa0 \n \xa0\xa0\xa0\xa0 if   (backUntilTime<sim.getSimulationTime())  then \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 -- When in forward mode, we simply move forward at the desired speed \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(leftMotor,speed) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(rightMotor,speed) \n \xa0\xa0\xa0\xa0 else \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 -- When in backward mode, we simply backup in a curve at reduced speed \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(leftMotor,-speed/2) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(rightMotor,-speed/8) \n \xa0\xa0\xa0\xa0 end \n end \n \xa0 \n function   sysCall_cleanup() \n \xa0\xa0\xa0\xa0 simUI.destroy(ui) \n end \n \n \n \n \n \n \n \n We run the simulation. \xa0 BubbleRob \xa0 now moves forward while trying to avoid obstacles (in a very basic fashion). While the simulation is still running, change \xa0 BubbleRob\'s \xa0 velocity, and copy/paste it a few times. Also try to scale a few of them while the simulation is still running. Be aware that the minimum distance calculation functionality might be heavily slowing down the simulation, depending on the environment. \n Using a script to control a robot or model is only one way of doing. CoppeliaSim offers many different ways (also combined), have a look at the \xa0 external controller tutorial . \n', 'tags': '', 'url': 'w11.html'}, {'title': 'hw', 'text': '', 'tags': '', 'url': 'hw.html'}, {'title': 'Replit', 'text': '如何維護網頁? \n 當在動態網站save剛更新的資料內容後>點擊convert轉換網站>回到replit點擊Git>在update輸入框中輸入更新內容的代名稱>點選stage&commit(會看到更新的內容已被載入)>最後點擊push>到github個人倉儲看是否有亮綠燈 \n 有(以上傳完成) \n 沒有(亮黃燈或亮紅燈代表還在上傳中) \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 's1511', 'text': '\n', 'tags': '', 'url': 's1511.html'}, {'title': 'localhost', 'text': '', 'tags': '', 'url': 'localhost.html'}, {'title': 'w12', 'text': '2b_w12_seat.txt \n 2a_w12_seat.txt \n w12_2b_1.mp4 \xa0(利用 簡報 說明最新的網路設定流程, 以及 w12 的課堂測驗內容) \n 校方的 DHCP6 並沒有正確設定系上的 IPv6 Gateway, 也沒有 DNS 伺服器設定, 使用者必須自行根據 所分配的固定 IPv6 位址 進行設定, 另外校方的 IPv6 DNS 伺服器也無法正常運作, 必須使用系上的 DNS server 設定. \n Windows 網路查詢指令: ipconfig /all \n DNS 伺服器查詢指令: nslookup \n 查詢至特定主機的路徑指令: tracert \n 其他 Windows 常用的網路指令 \n w12_2b_2.mp4 \xa0 ( 利用 簡報 說明如何將座次表放到倉儲 downloads 目錄, 且將連結放入 w12 頁面) \n 利用人工或電腦輔助方法建立 w12 頁面中的班上學員座次表? \n \n w12_2a_1.mp4 \xa0 (ssh-keygen 在 .ssh 建立 id_rsa 與 id_rsa.pub, 以 sftp 放入 config, 並利用 puttygent 將 id_rsa 轉為 .ppk 以便設立 session 用) \n w12_2a_2.mp4 \xa0 (如何利用 ChatGPT 協助解決座位排序與列印問題) \n w12_2a_3.mp4 \xa0 (有關 Solvespace 基本繪圖與轉檔, 最後說明如何利用 IPv6 相容的 Python 與 CoppeliaSim 進行互動) \n 使用 ChatGPT 協助處理 上述 問題一 : \n 輸入1: (在雙引號之後, 直接將檔案內容複製貼上, 作為輸入內容) \n 請利用 Python 讀取下列檔案名稱為 2b_w12_seat.txt "2b stud num\xa0\xa0 \xa0seat 41123201\xa0\xa0 \xa0 41123202\xa0\xa0 \xa0(3,8) 41123203\xa0\xa0 \xa0(3,7) 41123204\xa0\xa0 \xa0(6,8) ~~~ 中間資料沒有列出來 41136124\xa0\xa0 \xa0(3,2) 41136126\xa0\xa0 \xa0 41136131\xa0\xa0 \xa0" \n ChatGPT 回覆1: \n 要讀取這個檔案，你可以使用 Python 的檔案處理功能。以下是一個基本的範例程式碼，可以協助你達成這個目標： \n w12_chatgpt_prob1_ans1.py \n 這個程式碼會將學號和座位號的對應關係存儲在一個字典中，然後顯示出來。請注意，這裡使用 strip() 方法來去除空格和換行符號。 請確保你的檔案路徑正確，並注意檔案的編碼，以確保正確讀取中文內容。 \n 討論1: 經執行 ChatGPT 回覆的程式, 已經可以讀取資料, 並且列出資料. 但資料沒有排序. \n 輸入2: \n 假如前面程式中的座位號第一個 index 代表"列"而第二個 index 代表行, 請延續上個程式, 由左到右作為每一列的順序, 而且希望陣列排序是列出該位置上的學員學號 \n ChatGPT 回覆2: \n 了解，如果要按照座位號的列和行來排序並列出每個位置上的學號，我們可以修改程式碼來實現。以下是修改後的程式碼： \n w12_chatgpt_prob1_ans2.py \n 這裡我們使用了 sorted 函數，並通過 key 參數指定排序規則，即按照列和行的順序進行排序。最後，我們顯示排序後的結果，列出每個位置上的學號。 \n 討論2: 經執行 ChatGPT 回覆的程式, 所讀取的資料已經排序. \n \n 輸入3: \n 假如 "2b_w12_seat.txt" 可以從 "https://mde.tw/cadnote/downloads/2b_w12_seat.txt" 這個網址讀取, 而且希望將上一個 Python 程式改用 Brython 編寫, 要如何修改? \n ChatGPT 回覆3: \n Brython 是一個允許在瀏覽器中運行 Python 3 代碼的工具，而在瀏覽器中讀取外部檔案通常會涉及到跨網域 (Cross-Origin) 的問題。為了避免這些問題，我們可以使用 JavaScript 來在瀏覽器中讀取檔案，然後將檔案內容傳遞給 Brython。以下是修改後的 Brython 程式碼： \n (因為我們不使用 ChatGPT 混用 Javascript 與 Brython 的建立, 所以此地 不列出其回覆的原始碼 ) \n 這個 HTML 文件引入了 Brython，然後使用 JavaScript 的 XMLHttpRequest 將檔案內容從指定的 URL 讀取並傳遞給 Brython 的 eval 函數。在 eval 函數中執行 Python 代碼。這樣就可以在瀏覽器中運行 Python 代碼，同時解決了跨網域的問題。請注意，這裡假設檔案是文本格式，如果是二進制檔案，需要進一步處理。 \n 討論3: ChatGPT 建議的程式或許也能達成目的, 但是混用 Javascript 與 Brython 並不是目前所需, 因此不採用. \n \n 輸入4: \n 假如我們已經知道 Brython 可以利用 open(https://mde.tw/cadnote/downloads/2b_w12_seat.txt).read() 或 open(https://mde.tw/cadnote/downloads/2b_w12_seat.txt).readlines() 讀取到檔案, 可以將上一個程式全部改用 Brython 完成嗎? \n ChatGPT 回覆4: \n 是的，如果你已經知道 Brython 可以使用 open("https://mde.tw/cadnote/downloads/2b_w12_seat.txt").read() 或 open("https://mde.tw/cadnote/downloads/2b_w12_seat.txt").readlines() 讀取檔案，你可以將上述 Python 程式碼轉換為 Brython 程式碼。以下是修改後的程式碼： \n w12_chatgpt_prob1_ans3_brython.py \xa0 (這裡已經配合 cmsite 中的 Brython 環境, 可以 直接從 Gist 取出執行 ) \n 這個 HTML 文件使用 Brython 在瀏覽器中運行 Python 3 代碼。Brython 的 open 函數會模擬 Python 的 open 函數，讓你能夠在瀏覽器中讀取檔案。這樣就可以使用和在 Python 中一樣的方式處理檔案，同時在瀏覽器中運行。 \n 討論4: ChatGPT 因為帶有非常大量的邏輯變數, 因此詢問時若能給予明確指示, 將可能取得更有用的回答. \n 接下來就可以延續上述回覆所得到的程式碼, 加以研究後再修改為其他格式的資料輸出, 例如: \xa0 直接在 Brython 執行後, 列出所需要的 html 物件 . \n', 'tags': '', 'url': 'w12.html'}, {'title': 'w13', 'text': '利用 ChatGPT 對話所完成的 2a 座位排序程式: \xa0 w13_2a_seat.py 執行結果 \n 利用 " sudo update-rc.d stunnel4 defaults " 將 s.cycu.org 中的 stunnel4 設為與系統同步啟動. \n w13_2b_1.mp4 \xa0 (說明如何利用 ChatGPT 協助利用 Python 程式列出各組學員座位表) \n 接下來請根據下列步驟測試如何在 CoppeliaSim 場景中利用感測器偵測, 並對特定物件施力: \n 第一步: \n 下載支援 IPv6 網路協定版本 \xa0 CoppeliaSimEdu_4.5.1_rev4_for_cd2023.7z \xa0 (需要下載密碼) \n CoppeliaSim 使用者手冊 , \xa0 CoppeliaSim 4.3.0 使用手冊網站 \n 第二步: \n 與 ChatGPT 對話時, 可以利用\xa0 zmqRemoteAPI Python for cad2023.7z \xa0(需要下載密碼)\xa0中的 ZMQ Remote API Python 程式作為 Template, 探討如何設置感測器, 在正確時間對剛球施力. \n 第三步: \n 實際操作 CoppeliaSim 鋼球永動模擬器電腦輔助設計三個階段: 建立模型零組件 - 轉入機電模擬系統 - 根據實際物理條件設置機電系統.\xa0 perpetual_motion_simulator_project_cad2023.7z 下載 \xa0(需要密碼) \n 請各組學員將上列三個步驟的執行, 以 Wink 操作影片放入個人與分組網站中的 w13 頁面. \n w13_2b_2.mp4 \xa0 (有關上列操作步驟的說明) \n triangle_solvespace_coppeliasim_ex1.7z \xa0 (利用 Solvespace 建立 V 形軌道, 希望建立較簡單的鋼球永動模擬系統) \n', 'tags': '', 'url': 'w13.html'}, {'title': '乙班座位表:', 'text': '\n Filename: \xa0 .py \xa0 \n Run \xa0 Output \xa0 清除輸出區 清除繪圖區 Reload \n \n \n \n \n \n 座位號: (1,1), 學號: 41123220 \n 座位號: (1,2), 學號: 41123231 \n 座位號: (1,3), 學號: 41123213 \n 座位號: (1,4), 學號: 41123215 \n 座位號: (1,5), 學號: 41123207 \n 空位 \n 座位號: (1,7), 學號: 41123212 \n 座位號: (1,8), 學號: 41123238 \n 座位號: (1,9), 學號: 41123237 \n \n \n 空位 \n 座位號: (2,2), 學號: 41123221 \n 座位號: (2,3), 學號: 41123208 \n 空位 \n 空位 \n 座位號: (2,6), 學號: 41123209 \n 座位號: (2,7), 學號: 41123230 \n 座位號: (2,8), 學號: 41123233 \n 座位號: (2,9), 學號: 41123205 \n \n \n 空位 \n 座位號: (3,2), 學號: 41136124 \n 座位號: (3,3), 學號: 41123226 \n 座位號: (3,4), 學號: 41123206 \n 座位號: (3,5), 學號: 41123223 \n 座位號: (3,6), 學號: 41123227 \n 座位號: (3,7), 學號: 41123203 \n 座位號: (3,8), 學號: 41123202 \n 座位號: (3,9), 學號: 41123222 \n \n \n 座位號: (4,1), 學號: 41123214 \n 座位號: (4,2), 學號: 41123224 \n 座位號: (4,3), 學號: 41123210 \n 座位號: (4,4), 學號: 41123240 \n 座位號: (4,5), 學號: 41123218 \n 空位 \n 空位 \n 座位號: (4,8), 學號: 41123239 \n 座位號: (4,9), 學號: 41123245 \n \n \n 座位號: (5,1), 學號: 41123235 \n 座位號: (5,2), 學號: 41123229 \n 座位號: (5,3), 學號: 41123236 \n 座位號: (5,4), 學號: 41123251 \n 座位號: (5,5), 學號: 41123250 \n 座位號: (5,6), 學號: 41123246 \n 座位號: (5,7), 學號: 41123241 \n 座位號: (5,8), 學號: 41123243 \n 座位號: (5,9), 學號: 41123249 \n \n \n 空位 \n 座位號: (6,2), 學號: 41123211 \n 座位號: (6，3), 學號: 41123247 \n 座位號: (6,4), 學號: 41132222 \n 座位號: (6,5), 學號: 41123232 \n 空位 \n 座位號: (6,7), 學號: 41123217 \n 座位號: (6,8), 學號: 41123204 \n 座位號: (6,9), 學號: 41123216 \n \n \n 空位 \n 空位 \n 座位號: (7,3), 學號: 41136103 \n 空位 \n 空位 \n 空位 \n 空位 \n 空位 \n 空位 \n \n \n \n \n', 'tags': '', 'url': '乙班座位表:.html'}, {'title': 'w14', 'text': 'w14_2b_1.mp4 \xa0 (說明如何簡化專案一, 讓鋼球直接在兩個三角形斜面上進行永動模擬) \n w14_2b_2.mp4 \xa0 (延伸三角形斜面對鋼球施力的模式, 套用到 2d 的永動模擬器) \n w14_2a_1.mp4 \xa0 (延伸三角形斜面對鋼球施力的模式, 套用到 2d 的永動模擬器) \n w14_2b_2.mp4 \xa0 (說明如何執行\xa0 project1_w14_simple.7z \xa0(電磁力吸引) 的控制程式) \n', 'tags': '', 'url': 'w14.html'}, {'title': '專案一', 'text': 'Perpetual Motion Simulator 永動模擬器: \n cad2023_w14.7z \xa0 (需要透過控制系統設計找出能讓鋼球通過感測器時的最佳施力大小) \n project1_w14_simple.7z \xa0 (電磁力吸引) \n cad2023_w14_perpetual_motion_simulator_template.py \n \n 設置感測器與 ZMQ remote API python 施力程式後: \xa0 triangle_perpetual_motion_simulator.7z \n \n \n', 'tags': '', 'url': '專案一.html'}, {'title': '專案二', 'text': 'w14_2a_3.mp4 \xa0 (準備進入專案二) \n w14_2a_4.mp4 \xa0 (從 CAD 以 STL 將零組件轉入 CoppeliaSim 的注意事項) \n 1d_ball_balancing_get_distance.7z \xa0中的 Solvespace 組立件其座標為 Y 軸向上, 但 CoppeliaSim 場景中的絕對座標則為 Z 軸向上, 因此將 Solvespace 組立件轉入時, 必須選擇 Z 軸向上, 而且必須設法將所有零件的座標以自有的中心座標為準) \n w14_2b_3.mp4 \xa0 (說明如何利用 zmq Remote API 程式取得下列場景中鋼球與感測器間的距離) \n \n 參考資料: \n https://wikis.utexas.edu/display/RMD/Home+-+Robot+Mechanisms+Design \xa0 \n 以 API \xa0 改變重力 : \n sim.setArrayParameter(sim.arrayparam_gravity,{gx,gy,gz}). \n set initial velocity : \n sim.setObjectFloatParameter(objectHandle,X,y), where X can be sim.shapefloatparam_init_velocity_x, sim.shapefloatparam_init_velocity_y or sim.shapefloatparam_init_velocity_z, and y the initial velocity in that direction \n get object velocity : \n list linearVelocity, list angularVelocity = sim.getObjectVelocity(int objectHandle) \n Reinforcement Learning: \n https://www.coppeliarobotics.com/helpFiles/en/PyRep.htm \n https://github.com/chauby/CoppeliaSimRL \n Deep RL \xa0 ( ebook on Springer ) \n https://github.com/moliqingwa/coppeliasim_deeprl \n', 'tags': '', 'url': '專案二.html'}, {'title': 'w15', 'text': '操作考試 : 請利用自選的電腦輔助設計套件建立 \xa0 https://mde.tw/cadnote/content/pms.html \xa0 中的零組件 (尺寸與操控內容請自訂), 並加入感測器與適當的設計元件或機構, 說明預計如何令其在接上外部電源後, 能夠讓系統中的鋼球在軌道上進行永動模擬. \n 完成零組件與可行系統設計後, 請將零組件轉入 CoppeliaSim 建立模擬場景, 並在分組中自選另一名組員, 經過彼此討論後, 請利用 ZMQ remote API Python 程式互相控制對方的永動模擬場景, 以便完成兩人一組的兩則永動機模擬操作 (若找不到協同對象, 請自行用所分配到的 IPv6 位址進行控制模擬). \n 完成上述兩人一組的現場操作考試後, 請利用 Wink 製作 MP4 操作影片, 說明從零組件繪圖至完成互動控制模擬後的各階段細節, 並將上述各項內容放入個人倉儲與網站 (頁面標題請用第一階設定, 名稱為 exam). \n step1: 基本零組件設計繪圖. \n step2: 施力機構設計, 納入軌道下方控制盒中. \n step3: 將軌道、鋼球與簡化後的控制盒輸入 CoppeliaSim. \n step4: 配合控制系統設計, 納入感測器與施力機構或系統. \n step5: 在 localhost 以 IPv6 ZMQ remote API Python 程式, 配合感測器作動對鋼球施力. \n step6: 跨網路對協同組員的場景進行控制模擬. \n \n 截至 2023.12.22 Replit 仍可用來維護 Github 倉儲中的對應網站內容, 且可透過下列 html 將 Repl 嵌入網頁中: \n \n \n \n \n \n \n 1 \n \n \n \n < iframe   frameborder = "0"   width = "100%"   height = "400"   src = "https://replit.com/@wcms/cadnote?embed=true" ></ iframe > \n \n \n \n \n \n \n \n \n 例如要查詢埠號 9210 埠號的使用情形, 指令為\xa0 lsof -i :9210, 其中 ls 為 list, of 為 open file, -i 中的 i 為 internet, :9210 表示要求列出與 port 9210 有關 internet 使用相關的資料. \n', 'tags': '', 'url': 'w15.html'}, {'title': '考試-1', 'text': '載點: /downloads/組合1.stl \n 零件圖: \n \n \n \n 組合圖: \n 轉入coppeliasim加入ray type， \xa0以 IPv6 ZMQ remote API Python 程式, 配合感測器作動對鋼球施力 \n \n', 'tags': '', 'url': '考試-1.html'}, {'title': '繪圖心得:', 'text': '\n \n 功能強大 ：Inventor是Autodesk公司開發的專業CAD軟體，擁有豐富的功能和工具，支援多種3D建模和設計需求。 \n \n \n 用戶界面友好 ：它的使用介面相對直觀，有助於用戶快速上手和操作，但對於初學者可能還是需要一些時間適應。 \n \n \n 多種建模方式 ：支援不同的建模方式，包括實體建模、組件建模、組裝設計等，能夠應對不同設計需求。 \n \n \n 大型組件處理 ：Inventor對於處理大型組件和複雜設計有良好的效能，能夠有效地處理大量數據和複雜的結構。 \n \n \n 模擬和測試功能 ：提供一些模擬和測試工具，如應力分析、運動仿真等，用於評估和改進設計。 \n \n \n 文件和版本管理 ：內建版本控制和文件管理功能，有助於用戶追蹤設計的變更歷史和管理不同版本。 \n \n \n 技術支援和社群 ：有龐大的使用者社群和技術支援，用戶可以通過社群獲取許多有用的資訊和解決問題。 \n \n \n', 'tags': '', 'url': '繪圖心得:.html'}, {'title': '倉儲與網站評分項目', 'text': '教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \xa0 \n 倉儲與網站評分項目: \n A: 是否 按照進度明確標示倉儲的改版歷程 \n 答:是 \n B: 是否根據 \xa0 IPv4 與 IPv6 \xa0 網路環境設定進行作法討論 \n 答:IPv4設定： \n \n \n 手動配置 ：通常在IPv4下，你需要設定IP位址、子網遮罩、預設網關和DNS伺服器。這些設定可以在作業系統的網路設定中進行。 \n \n \n DHCP自動配置 ：這是一種更方便的方法，路由器或伺服器可以自動分配IP位址、子網遮罩、預設網關和DNS伺服器。 \n \n \n IPv6設定： \n \n \n 自動配置（SLAAC） ：IPv6允許設備根據路由器廣播的網路前綴自動配置自己的IPv6位址。這種方式稱為簡單網路配置協定（SLAAC）。 \n \n \n DHCPv6 ：類似IPv4的DHCP，IPv6也有DHCPv6協議，可以用來配置IPv6位址、網關和其他網路參數。 \n \n \n C: 是否就 \xa0 Replit、s.cycu.org 與 localhost \xa0 情境下對個人與分組倉儲進行設定操作 \n \n D: 是否就所分配的 \xa0 CAD 套件 從安裝設定到繪圖提供內容參考 \n 答:是，我利用ONSHAPE做安裝設定及繪圖 \n E: 是否使用所分配的 CAD 套件完成 專案一零組件繪圖 , 並提供零組件下載 \n 答:是，我利用ONSHAPE做安裝設定及繪圖 \n F: 是否將自行繪製的專案一零組件 轉入 CoppeliaSim \n 答:是，我利用ONSHAPE繪圖並轉入 CoppeliaSim \n G: 是否利用 \xa0 ZMQ Remote API Python \xa0 對專案一轉入的零組件設定感測器, 並進行 鋼球永動模擬 \n 答:是，我利用ONSHAPE繪圖並轉入 CoppeliaSim \n H: 是否實際操作 \xa0 Triangle 軌道系統 的鋼球永動模擬 \n 答:是 \n I: 是否完成 W15 的平面雙 U 迴路上的 鋼球永動系統繪圖、轉檔與系統模擬 \n 答:是，我利用ONSHAPE繪圖並轉入 CoppeliaSim \n J: 是否使用所分配的 CAD 套件完成 專案二 1D 平台零組件繪圖 , 並提供零組件下載 \n 答:是，我利用ONSHAPE繪圖並轉入 CoppeliaSim \n K: 是否利用 \xa0 ZMQ Remote API Python \xa0 對專案二轉入的零組件設定感測器, 並進行鋼球永動模擬 \n 答:是，我利用ONSHAPE繪圖並轉入 CoppeliaSim \n L: 是否針對專案二的 1D 平台鋼球平衡系統所需的 \xa0 PID 控制理論 進行資料收集與 ChatGPT 對答 \n 答:PID（比例-積分-微分）控制器是一種廣泛應用於控制系統中的反饋控制器。它由三個部分組成：比例項（P）、積分項（I）和微分項（D）。這些項結合在一起，以調節系統輸出，使其接近預期的目標值。 \n \n \n 比例項（P） ：根據當前偏差（目標值與實際值之間的差異）來生成控制輸出。比例控制根據偏差的大小來決定控制量的大小。當偏差大時，輸出也會相對較大。 \n \n \n 積分項（I） ：積分項解決了長期偏差的問題。它考慮過去一段時間內的偏差總和，並對系統進行調節，以消除積累的偏差。這有助於系統達到更精確的穩定狀態。 \n \n \n 微分項（D） ：微分項考慮偏差變化的速度。它減少偏差變化速率過快導致的系統震盪。微分控制有助於減緩偏差變化速率，提高系統的響應速度。 \n \n \n 這些項通常組合在一起形成PID控制器的輸出。PID控制器的參數（P、I、D的比例）需要根據特定系統的需求和特性進行調整，這通常需要一定的控制系統理論知識和實際系統的測試和調整。 \n PID控制器廣泛應用於自動控制系統中，例如工業生產、機器人控制、溫度控制等領域。通過調節PID控制器的參數，可以實現系統穩定性、精確性和響應速度之間的平衡。 \n', 'tags': '', 'url': '倉儲與網站評分項目.html'}, {'title': '零組件繪圖', 'text': '', 'tags': '', 'url': '零組件繪圖.html'}, {'title': 'Onshape組合圖', 'text': '\n \n 繪圖心得: \n \n \n 協作性強 ：Onshape是基於雲端的CAD軟體，可以讓多個使用者同時在線上編輯和查看設計，這樣方便了團隊間的合作。 \n \n \n 跨平台支援 ：Onshape不需要安裝，可在網頁瀏覽器上運行，並且支援多種裝置和操作系統，方便用戶使用。 \n \n \n 版本控制和歷史記錄 ：Onshape內建版本控制，記錄設計的變更歷史，方便用戶回溯和管理不同版本的設計。 \n \n \n 功能豐富 ：它具有多種建模和編輯工具，支援3D建模和製圖，能夠應對不同複雜度的設計需求。 \n \n \n 學習曲線較低 ：相對於一些傳統的CAD軟體，Onshape的使用介面相對直觀，對於新手來說學習起來可能會較為容易。 \n \n \n 需求穩定的網路連接 ：因為它是基於雲端的軟體，使用者需要有穩定的網路連接來進行操作，避免因為連接問題導致工作中斷。 \n \n \n 設計資料安全性 ：考慮到敏感的設計資料，使用者需要確保合適的安全措施，保護其在雲端上的存儲和傳輸安全。 \n \n \n', 'tags': '', 'url': 'Onshape組合圖.html'}, {'title': 'Onshape零組件', 'text': '檔案連結： 磁力吸引繪圖影片.mp4 \n \n 桿子 \n \n 球 \n \n 底板 \n \n 環形 \n \n 平台 \n \n 環形 \n \n 繪圖心得： \n \n \n 協作性強 ：Onshape是基於雲端的CAD軟體，可以讓多個使用者同時在線上編輯和查看設計，這樣方便了團隊間的合作。 \n \n \n 跨平台支援 ：Onshape不需要安裝，可在網頁瀏覽器上運行，並且支援多種裝置和操作系統，方便用戶使用。 \n \n \n 版本控制和歷史記錄 ：Onshape內建版本控制，記錄設計的變更歷史，方便用戶回溯和管理不同版本的設計。 \n \n \n 功能豐富 ：它具有多種建模和編輯工具，支援3D建模和製圖，能夠應對不同複雜度的設計需求。 \n \n \n 學習曲線較低 ：相對於一些傳統的CAD軟體，Onshape的使用介面相對直觀，對於新手來說學習起來可能會較為容易。 \n \n \n 需求穩定的網路連接 ：因為它是基於雲端的軟體，使用者需要有穩定的網路連接來進行操作，避免因為連接問題導致工作中斷。 \n \n \n 設計資料安全性 ：考慮到敏感的設計資料，使用者需要確保合適的安全措施，保護其在雲端上的存儲和傳輸安全。 \n \n \n', 'tags': '', 'url': 'Onshape零組件.html'}, {'title': '考試-2', 'text': '載點: /downloads/組合1.stl \n 零件圖: \n \n \n \n 組合圖: \n 轉入coppeliasim加入ray type， \xa0以 IPv6 ZMQ remote API Python 程式, 配合感測器作動對鋼球施力 \n \n', 'tags': '', 'url': '考試-2.html'}, {'title': '模擬過程', 'text': '到w14下載 project1_14w_simple.py ，解壓縮完把# pip install cbor pyzmq和#pip install keyboard複製丟到命令字元下載 \n \n \n \n 組合圖載入程式，對組合圖做爆炸 \n \n 對零件開碰撞，底座以及球分別開 \n \n 加入雷射，在SOTE改名稱， 把雷射名稱改成sensor，球名稱改marble \n \n 按下go即可啟動模擬 \n \n', 'tags': '', 'url': '模擬過程.html'}, {'title': '任務一', 'text': '\n 2023.09.14 上午 2b 上課時段, 之所以沒有 IPv6 網路連線的原因是: \xa0 BGA-0810-S 網管集線器的 port 24 硬體故障 , 無法從工作站室取得機械設計系網路主幹訊號. \n 在 Replit Python 環境中就是內建 Python3, 因此安裝模組必須使用 pip 而非一般 Linux 環境中使用的 pip3: \n 以 import 將倉儲從 github 導入後, 必須使用 git submodule update --init 取下 cmsimde 子模組內容 (因為 Replit import 不會自動取下倉儲對應的子模組). \n 取下子模組之後, 以 Run 嘗試以 Python3 執行 main.py, 讓 Replit 自行調適所需的 Python3 環境, 結果會顯示缺少啟動 cmsimde 網站的模組, 再以下列指令在 Shell 頁面安裝所需模組: \n pip install flask flask_cors bs4 lxml markdown pelican gevent \n 其中 flask 為 Python 網際框架, flask_cors 則允許跨網域擷取資料的 flask 延伸模組, bs4 與 lxml 用於超文件分頁, markdown 與 pelican 則允許使用者採 Markdown 格式編寫網誌內容, 並且利用 Pelican 套件轉為 html 格式的網誌文章. 至於 gevent 則是 Replit 內建使用的同步網路程式庫. \n 手動載下倉儲子模組, 試以 Run 執行之後再安裝 cmsimde 編輯網站所需模組, 應該就可以利用 Run 啟動倉儲對應的動態網站. \n 最後, 為了保全網站登入的管理者密碼編碼, 還需要在 Secrets 頁面中建立 config 變數, 並將近端 config/config 所修改的管理者密碼編碼登錄至 config 變數. \n \n 請自選 CAD 套件, 依照下列圖示, 以能將此系統放在電腦桌上作為參考尺寸, 繪製所需的零組件, 並將各零組件檔案與畫面上傳至個人的 Onedrive, 或以 Onshape 上的公開連結展示所完成的資料. \n 最後在個人的 \xa0 帳號.github.io/cad2023 \xa0 網站上呈現任務一所完成的結果 (請以 H1 且標題為任務一建立網頁). \n 有關電腦輔助設計繪圖套件: \n 機械設計工程系所提供的 SolidWorks 與 NX 都必須在啟動時, 透過網路至分別位於校本部與系上的認證主機進行登錄, 才能開啟. 其中 Siemens \xa0 NX2027.3401_lite_cad2022.7z \xa0 (需要下載密碼) 可以放入隨身碟, 在任一台 Windows 64 位元的電腦上, 連接網路取得認證後開啟. \n Siemens Solid Edge 則提供 \xa0 Community 版本 , 安裝後無需上網即可使用, 在電腦輔助設計室則可以下載 \xa0 se_portable_X_for_cad2023.7z \xa0 (需要下載密碼), 放入隨身碟後, 先執行所附的系統組態批次檔後, 直接以批次檔案開啟. \n Solvespace \xa0 則適合在初步設計階段, 提供尺寸規劃或外型較為簡單的零組件繪製. \n \n 零組件繪圖完成後, 請轉為 STL 格式轉入 CoppeliaSim 進行機電系統模擬. \n 下載 \xa0 CoppeliaSimEdu_4.5.1_rev4_for_cd2023.7z \xa0 (需要下載密碼) \n CoppeliaSim 使用者手冊 , \xa0 CoppeliaSim 4.3.0 使用手冊網站 \n References: \n Simulation Tools for Model-Based Robotics: Comparison of Bullet, Havok, MuJoCo, ODE and PhysX \n Tautochrone curve - Wikipedia \xa0 \n rolling-ball.pdf (umbc.edu) \n Modelling of the force state of contact of a ball rolling along the boundaries of two rails \n On the dynamics of a rolling ball actuated by internal point masses \n On the Optimal Control of a Rolling Ball Robot Actuated by Internal Point Masses \n', 'tags': '', 'url': '任務一.html'}, {'title': '下載模組', 'text': '讓鋼球直接在兩個三角形斜面上進行永動模擬 \n 先下載以下兩個模組 \n \n \n \n 啟動 \n \n \n', 'tags': '', 'url': '下載模組.html'}, {'title': '磁力吸引', 'text': '有關磁力吸引的鋼球循環運動系統, 請參考 這個影片 . \xa0 或者透過課程檔案下載密碼觀看 這個影片 . \n 根據 這個網站 宣稱是此一 Perpetual Motion Simulator 的原始創作者. \n 同時參考\xa0 A perpetual motion machine powered by electromagnetism.pdf \xa0 (需要下載密碼) \n 電腦輔助設計與實習課程的任務一即可根據此一裝置的設計, 先採用電腦輔助設計軟體, 繪製系統所需的 3D 零組件, 然後轉為 STL 格式, import 進入 CoppeliaSim, 接著根據影片說明, 利用近接感測器(例如: \xa0 電感式近接開關 , \xa0 Inductive proximity sensor ) 控制電磁鐵開關, 設法透過磁力吸引讓鋼球具有足夠動能返回圓形平台. \n 有關利用 Arduino 控制卡與相關電路設計產生電磁力控制的模擬, 請參考 \xa0 PICSimLab \xa0 頁面中的說明. \n 一旦完成 CoppeliaSim 與 Arduino 電路設計等機電資系統整合模擬, 就可以進一步利用 3D printer 列印出所需零組件, 結合實體電路設計完成此一系統的虛實整合. \n 機電模擬系統: \n 下載支援 IPv6 網路協定版本 \xa0 CoppeliaSimEdu_4.5.1_rev4_for_cd2023.7z \xa0 (需要下載密碼) \n CoppeliaSim 使用者手冊 , \xa0 CoppeliaSim 4.3.0 使用手冊網站 \n 模擬磁力的 討論 , \xa0 1 , \xa0 2 \n Force Control Modeling \n simpleMagnetDemo.ttt \n 模擬原理: \n Perpetual Motion Simulator 主要的電路設計包含右側軌道下方的電磁鐵, 通電後可產生一定大小的磁吸力, 當圓形鐵球循著軌道由平台孔洞往下滾動, 經過軌道下方近接感測器 (Proximity sensor) 時 (距離 3mm-5mm), 透過感應, 控制電路將會短暫啟動電磁鐵 (10 miliseconds), 促使圓形鐵球加速滾動, 其磁力大小約略與圓形鐵球距離的平方成反比 ( Computational Electromagnetics , \xa0 磁場模擬 ). \n 因此圓形鐵球除了從平台高度落下時, 將位能轉換為動能外, 與軌道滾動磨擦以及空氣阻力所損耗的運動能, 將額外由電磁鐵開關間所得到的磁力吸引能量進行加速, 以便取得足夠的動能在脫離軌道末端後, 重新回到圓形平台. \n \n (image from \xa0 here ) \n 電磁力未啟動下的 perpetual motion simulator CoppeliaSim 場景模擬: \n \n Images and part files in Onshape \xa0 (STL file import into CoppeliaSim 尺寸由 mm 放大10 倍至 cm, 且 z 軸向上, 場景中圓球直徑為 12.825 cm, 平台圓孔直徑為 20 cm) \n \n Perpetual Motion Simulator in Onshape , 轉入 CoppeliaSim 後放大 10 倍, 且 z 軸向上之模擬場景, 下載 \xa0 perpetual motion simulator stage2.7z \xa0 (需要下載密碼) \n 有關如何在 Onshape 繪製零組件, 轉出 STL 檔案, 轉入 CoppeliaSim 並進行組件 divide and group, 請參考這個 教學影片 . \n 以下 Python 程式可在 CoppeliaSim 場景檔案中建立所需的模擬組件: \n 啟動 \xa0 CoppeliaSimEdu_4.5.1_rev4_for_cd2023.7z \xa0 (支援 IPv6 網路協定版本, 需要下載密碼), 然後在 \xa0 Portable_2023_fall_1.3g_5g.7z \xa0 (需要下載密碼) 可攜環境啟動後, 以 pip install pyzmq cbor keyboard 安裝所需模組, 然後執行下列 zmqRemoteAPI IPv6 程式, 將滑鼠在場景中點擊後, 按下 q 鍵即可終止場景模擬: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n \n \n \n # zmqRemoteApi_IPv6 為將 zmq 通訊協定修改為 IPv4 與 IPv6 相容 \n # pip install pyzmq cbor keyboard \n from   zmqRemoteApi_IPv6  import   RemoteAPIClient \n import   time \n import   math \n import   keyboard \n \xa0 \n # 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線 \n client  =   RemoteAPIClient( \'localhost\' ,  23000 ) \n # 以 getObject 方法取得場景物件 \n sim  =   client.getObject( \'sim\' ) \n box  =   sim.getObject( \'/box\' ) \n \xa0 \n # 啟動模擬 \n sim.startSimulation() \n # 建立尺寸數列, 分別定義 x, y, z 方向尺寸 \n x  =   0.2 \n y  =   0.2 \n z  =   0.1 \n size  =   [x, y, z] \n \xa0 \n # 利用 size 數列, 建立圓柱物件, 2 代表 cylinder \n # 8 表示 respondable, 1 為 質量 \n digit1_handle  =   sim.createPureShape( 2 ,  8 , size,  1 ,  None ) \n # 將圓柱物件命名為 digit1, 若用於機械計分可做為個位數轉盤 \n # 之後可再導入帶有數字組立的外型零件 \n sim.setObjectAlias(digit1_handle,  \'digit1\' ) \n # 轉角單位為徑度 \n sim.setObjectOrientation(digit1_handle,  - 1 , [ 0 , math.pi / 2 ,  0 ]) \n # 起始物件中心位於 [0, 0, 0], 為了位於地板, 往 z 提升一個半徑高度 \n sim.setObjectPosition(digit1_handle,  - 1 , [ 0 ,  0 , x / 2 ]) \n \xa0 \n # 建立 revolute joint 命名為 joint, 且將 joint mode 設為 dynamic, control mode 設為 velocity \n joint1_handle  =   sim.createJoint(sim.joint_revolute_subtype, sim.jointmode_dynamic,  0 ,  None ) \n sim.setObjectInt32Param(joint1_handle, sim.jointintparam_dynctrlmode, sim.jointdynctrl_velocity) \n sim.setObjectAlias(joint1_handle,  \'joint1\' ) \n \xa0 \n # 取得 cylinder 的位置座標 \n digit1_pos  =   sim.getObjectPosition(digit1_handle,  - 1 ) \n joint1_pos  =   [digit1_pos[ 0 ], digit1_pos[ 1 ], digit1_pos[ 2 ]] \n \xa0 \n # 將 joint1 至於 cylinder 中心 \n sim.setObjectPosition(joint1_handle,  - 1 , joint1_pos) \n # 取得 digit1_handle 的方位 \n digit1_ori  =   sim.getObjectOrientation(digit1_handle,  - 1 ) \n # 將 joint1_handle 方位與 digit1 對齊 \n sim.setObjectOrientation(joint1_handle,  - 1 , digit1_ori) \n \xa0 \n # 將 joint1 置於 box 上 \n sim.setObjectParent(joint1_handle, box,  True ) \n # 將 cylinder 置於 joint1 上 \n sim.setObjectParent(digit1_handle, joint1_handle,  True ) \n \xa0 \n # 鎖定 joint1 \n sim.setJointForce(joint1_handle,  float ( \'inf\' )) \n \xa0 \n print ( "基本場景建立完成!" ) \n \xa0 \n # 設定主迴圈 \n while   True : \n \xa0\xa0\xa0\xa0 # 設定 joint1 目標速度 \n \xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(joint1_handle,  10 ) \n \xa0\xa0\xa0\xa0 # 讓 coppeliasim 有時間按照設定讓 joint1 旋轉 \n \xa0\xa0\xa0\xa0 time.sleep( 0.01 )  \n \xa0 \n \xa0\xa0\xa0\xa0 if   keyboard.is_pressed( \'q\' ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 可以按下 q 鍵跳出重複執行迴圈 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 break \n \xa0 \n # 終止模擬 \n sim.stopSimulation() \n \n \n \n \n \n \n \n 下載 \xa0 zmqRemoteAPI Python for cad2023.7z \xa0 (需要下載密碼) \n 在 \xa0 simpleMagnetDemo.ttt \xa0 中利用 Lua 以 proximity sensor 感測與物體的距離後, 產生電磁吸引力的範例程式: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n \n \n \n function   sysCall_init() \n \xa0\xa0\xa0\xa0\xa0 -- 初始化 callback 函數，在模擬開始時執行 \n \xa0\xa0\xa0\xa0\xa0 sensor = sim.getObject( \'./sensor\' ) \n \xa0\xa0\xa0\xa0\xa0 -- 取得命名為 \'sensor\' 的物件 handle。 此處使用 proximity 感測器，用於檢測物體之間的距離 \n \xa0\xa0\xa0\xa0\xa0 shape = sim.getObject( \'.\' ) \n \xa0\xa0\xa0\xa0\xa0 -- 取得目前 script 所依附的物件 handle，即包含此 script 的物件 handle \n \xa0\xa0\xa0\xa0\xa0 sim.setObjectInt32Param(shape, sim.shapeintparam_static, 0) \n \xa0\xa0\xa0\xa0\xa0 -- 將物體設定為非靜態，讓其在模擬中發生動態運動 \n \xa0\xa0\xa0\xa0\xa0 nominalForce = 0.001 \n \xa0\xa0\xa0\xa0\xa0 -- 設定電磁吸引力的標準值 \n \xa0\xa0\xa0\xa0\xa0 enabled =  true \n \xa0\xa0\xa0\xa0\xa0 -- 啟用電磁吸引力 \n \xa0\xa0\xa0\xa0\xa0 previousPos = sim.getObjectPosition(shape, sim.handle_world) \n \xa0\xa0\xa0\xa0\xa0 -- 取得物體的初始位置並儲存在 previousPos 變數中，用於偵測物體是否移動 \n end \n \xa0 \n function   sysCall_actuation() \n \xa0\xa0\xa0\xa0\xa0 -- 驅動 callback 函數，在每個模擬步驟中執行 \n \xa0\xa0\xa0\xa0\xa0 if   enabled  then \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 -- 如果啟用電磁吸引力，執行下列程式碼 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 local   r, dist, pt, obj = sim.handleProximitySensor(sensor) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 -- 使用 proximity 感測器偵測物體是否接近 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   r > 0  then \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 -- 如果偵測到物體 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 dist = dist + 0.02 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 -- 增加一個 offset，以避免物體接觸時產生無限大的吸引力 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 local   force = nominalForce / (dist * dist) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 -- 計算吸引力的大小，與距離的平方成反比 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 local   m = sim.getObjectMatrix(shape, sim.handle_world) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 m[4] = 0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 m[8] = 0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 m[12] = 0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 -- 取得物體的轉換矩陣，不考慮平移部分 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 local   forceVector = sim.multiplyVector(m, {0, 0, force}) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 -- 將力向量從局部座標系轉換為絕對座標系 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.addForceAndTorque(shape, forceVector, {0, 0, 0}) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 -- 將計算得到的力應用於物體的質心，持續一個 time step \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   notFirstPass  then \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 local   p = sim.getObjectPosition(shape, sim.handle_world) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 local   dx = {p[1] - previousPos[1], p[2] - previousPos[2], p[3] - previousPos[3]} \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 local   d =  math.sqrt (dx[1] * dx[1] + dx[2] * dx[2] + dx[3] * dx[3]) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 -- 計算物體是否移動 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   d < 0.0001  then \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setObjectInt32Param(shape, sim.shapeintparam_static, 1) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.resetDynamicObject(shape) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 enabled =  false \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 -- 如果物體沒有移動，將其設為靜態 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 end \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 previousPos = p \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 end \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 end \n \xa0\xa0\xa0\xa0\xa0 end \n \xa0\xa0\xa0\xa0\xa0 notFirstPass =  true \n end \n \n \n \n \n \n \n', 'tags': '', 'url': '磁力吸引.html'}, {'title': '馬達推動', 'text': '除了利用磁力吸引, 讓鋼球在軌道運動時能具備足夠動能返回圓形平台外, 另外一種設計是在鋼球 (或其他非鐵材質的圓球) 離開圓形平台孔洞之後, 設法利用隱藏式的馬達帶動機構, 以滾動方式加速圓球, 以便讓圓球返回平台. \n 有關馬達推動設計, 請參考: \xa0 https://www.instructables.com/Marblevator-Perpetual/ \xa0 或 這個影片 . \n 機電模擬系統: \n 下載 \xa0 CoppeliaSimEdu_4.5.1_rev4_for_cd2023.7z \xa0 (需要下載密碼) \n CoppeliaSim 使用者手冊 , \xa0 CoppeliaSim 4.3.0 使用手冊網站 \n', 'tags': '', 'url': '馬達推動.html'}, {'title': '課程總結', 'text': '總結報告: \n 作為電腦輔助設計（Computer-Aided Design, CAD）與實習的學生，透過MCAD零組件繪圖並結合CoppeliaSim進行機電資整合系統模擬及應用，絕對是一個豐富且具有挑戰性的學習經驗。 \n \n \n 實踐知識轉換 ：這樣的課程允許我將在課堂上學到的理論知識轉換為實際的應用。透過MCAD零組件繪圖，我能夠實際設計機械零件，而結合CoppeliaSim則使我能夠將這些零件放入虛擬環境中進行模擬。 \n \n \n 機電資整合的綜合應用 ：這門課程的獨特之處在於結合了機械設計、電子元件的整合以及模擬環境。這讓我能夠在整合性的項目中應用多個學科領域的知識，進一步加深對機電資整合的理解。 \n \n \n 實際問題解決 ：透過CoppeliaSim的使用，我能夠模擬機械系統在虛擬環境中的運作，並且在這個過程中發現並解決潛在的問題。這培養了我實際問題解決的能力。 \n \n \n 協同合作 ：這樣的課程通常需要學生在團隊中合作，特別是在模擬整合系統的過程中。這鼓勵了我們學習如何有效地協作，並理解不同領域的同事如何將他們的專業知識融入整體項目。 \n \n \n 提升自主學習能力 ：MCAD零組件繪圖和CoppeliaSim的使用通常需要一定的自主學習，這讓我學會更好地自主探索新工具和技術。這種能力對於未來在實際工作中學習新技術非常重要。 \n \n \n \xa0 \n \n \n', 'tags': '', 'url': '課程總結.html'}]};